[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Campagne",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "login_view",
        "importPath": "accounts.views",
        "description": "accounts.views",
        "isExtraImport": true,
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "register_view",
        "importPath": "accounts.views",
        "description": "accounts.views",
        "isExtraImport": true,
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "importPath": "accounts.views",
        "description": "accounts.views",
        "isExtraImport": true,
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "importPath": "accounts.views",
        "description": "accounts.views",
        "isExtraImport": true,
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "profile_edit",
        "importPath": "accounts.views",
        "description": "accounts.views",
        "isExtraImport": true,
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_logged_in",
        "importPath": "django.contrib.auth.signals",
        "description": "django.contrib.auth.signals",
        "isExtraImport": true,
        "detail": "django.contrib.auth.signals",
        "documentation": {}
    },
    {
        "label": "user_logged_out",
        "importPath": "django.contrib.auth.signals",
        "description": "django.contrib.auth.signals",
        "isExtraImport": true,
        "detail": "django.contrib.auth.signals",
        "documentation": {}
    },
    {
        "label": "Acquisition",
        "importPath": "acquisition.models",
        "description": "acquisition.models",
        "isExtraImport": true,
        "detail": "acquisition.models",
        "documentation": {}
    },
    {
        "label": "SERVICES",
        "importPath": "acquisition.models",
        "description": "acquisition.models",
        "isExtraImport": true,
        "detail": "acquisition.models",
        "documentation": {}
    },
    {
        "label": "Acquisition",
        "importPath": "acquisition.models",
        "description": "acquisition.models",
        "isExtraImport": true,
        "detail": "acquisition.models",
        "documentation": {}
    },
    {
        "label": "Acquisition",
        "importPath": "acquisition.models",
        "description": "acquisition.models",
        "isExtraImport": true,
        "detail": "acquisition.models",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "importPath": "forms.province",
        "description": "forms.province",
        "isExtraImport": true,
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "importPath": "forms.statut",
        "description": "forms.statut",
        "isExtraImport": true,
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "acquisition_add",
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "isExtraImport": true,
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "acquisition_list",
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "isExtraImport": true,
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "acquisition_update",
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "isExtraImport": true,
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "acquisition_view",
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "isExtraImport": true,
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "acquisition_destroy",
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "isExtraImport": true,
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotFound",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotFound",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotFound",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseNotFound",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "AcquisitionForm",
        "importPath": "acquisition.forms",
        "description": "acquisition.forms",
        "isExtraImport": true,
        "detail": "acquisition.forms",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "agenda.models",
        "description": "agenda.models",
        "isExtraImport": true,
        "detail": "agenda.models",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "agenda.models",
        "description": "agenda.models",
        "isExtraImport": true,
        "detail": "agenda.models",
        "documentation": {}
    },
    {
        "label": "THEME",
        "importPath": "agenda.models",
        "description": "agenda.models",
        "isExtraImport": true,
        "detail": "agenda.models",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "agenda.models",
        "description": "agenda.models",
        "isExtraImport": true,
        "detail": "agenda.models",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "agenda.models",
        "description": "agenda.models",
        "isExtraImport": true,
        "detail": "agenda.models",
        "documentation": {}
    },
    {
        "label": "ModelForm",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "DateInput",
        "importPath": "django.forms",
        "description": "django.forms",
        "isExtraImport": true,
        "detail": "django.forms",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "django.contrib.sessions.models",
        "description": "django.contrib.sessions.models",
        "isExtraImport": true,
        "detail": "django.contrib.sessions.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "agenda_view",
        "importPath": "agenda.views",
        "description": "agenda.views",
        "isExtraImport": true,
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "agenda_detail",
        "importPath": "agenda.views",
        "description": "agenda.views",
        "isExtraImport": true,
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "note_view",
        "importPath": "agenda.views",
        "description": "agenda.views",
        "isExtraImport": true,
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "note_detail",
        "importPath": "agenda.views",
        "description": "agenda.views",
        "isExtraImport": true,
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "NoteDeleteView",
        "importPath": "agenda.views",
        "description": "agenda.views",
        "isExtraImport": true,
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "HTMLCalendar",
        "importPath": "calendar",
        "description": "calendar",
        "isExtraImport": true,
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "eventcalendar.helper",
        "description": "eventcalendar.helper",
        "isExtraImport": true,
        "detail": "eventcalendar.helper",
        "documentation": {}
    },
    {
        "label": "generic",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "NoteForm",
        "importPath": "agenda.forms",
        "description": "agenda.forms",
        "isExtraImport": true,
        "detail": "agenda.forms",
        "documentation": {}
    },
    {
        "label": "index_view",
        "importPath": "app.views",
        "description": "app.views",
        "isExtraImport": true,
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "PastDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "FutureDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "PastDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "FutureDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "PastDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "FutureDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "PastDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "FutureDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "PastDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "FutureDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "PastDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "FutureDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "PastDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "FutureDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "PastDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "FutureDateRangeFilter",
        "importPath": "daterangefilter.filters",
        "description": "daterangefilter.filters",
        "isExtraImport": true,
        "detail": "daterangefilter.filters",
        "documentation": {}
    },
    {
        "label": "Commprom",
        "importPath": "commprom.models",
        "description": "commprom.models",
        "isExtraImport": true,
        "detail": "commprom.models",
        "documentation": {}
    },
    {
        "label": "Commprom",
        "importPath": "commprom.models",
        "description": "commprom.models",
        "isExtraImport": true,
        "detail": "commprom.models",
        "documentation": {}
    },
    {
        "label": "Commprom",
        "importPath": "commprom.models",
        "description": "commprom.models",
        "isExtraImport": true,
        "detail": "commprom.models",
        "documentation": {}
    },
    {
        "label": "Commprom",
        "importPath": "commprom.models",
        "description": "commprom.models",
        "isExtraImport": true,
        "detail": "commprom.models",
        "documentation": {}
    },
    {
        "label": "commprom_add",
        "importPath": "commprom.views",
        "description": "commprom.views",
        "isExtraImport": true,
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "commprom_list",
        "importPath": "commprom.views",
        "description": "commprom.views",
        "isExtraImport": true,
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "commprom_update",
        "importPath": "commprom.views",
        "description": "commprom.views",
        "isExtraImport": true,
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "commprom_view",
        "importPath": "commprom.views",
        "description": "commprom.views",
        "isExtraImport": true,
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "commprom_destroy",
        "importPath": "commprom.views",
        "description": "commprom.views",
        "isExtraImport": true,
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "CommpromForm",
        "importPath": "commprom.forms",
        "description": "commprom.forms",
        "isExtraImport": true,
        "detail": "commprom.forms",
        "documentation": {}
    },
    {
        "label": "Compte_dormant",
        "importPath": "comptedormant.models",
        "description": "comptedormant.models",
        "isExtraImport": true,
        "detail": "comptedormant.models",
        "documentation": {}
    },
    {
        "label": "Compte_dormant",
        "importPath": "comptedormant.models",
        "description": "comptedormant.models",
        "isExtraImport": true,
        "detail": "comptedormant.models",
        "documentation": {}
    },
    {
        "label": "Compte_dormant",
        "importPath": "comptedormant.models",
        "description": "comptedormant.models",
        "isExtraImport": true,
        "detail": "comptedormant.models",
        "documentation": {}
    },
    {
        "label": "Compte_dormant",
        "importPath": "comptedormant.models",
        "description": "comptedormant.models",
        "isExtraImport": true,
        "detail": "comptedormant.models",
        "documentation": {}
    },
    {
        "label": "compte_dormant_add",
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "isExtraImport": true,
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "compte_dormant_list",
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "isExtraImport": true,
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "compte_dormant_view",
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "isExtraImport": true,
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "compte_dormant_update",
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "isExtraImport": true,
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "compte_dormant_destroy",
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "isExtraImport": true,
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "Compte_dormantForm",
        "importPath": "comptedormant.forms",
        "description": "comptedormant.forms",
        "isExtraImport": true,
        "detail": "comptedormant.forms",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "compile",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "compile",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "compile",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "compile",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "Contact",
        "importPath": "contacts.models",
        "description": "contacts.models",
        "isExtraImport": true,
        "detail": "contacts.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "importPath": "contacts.models",
        "description": "contacts.models",
        "isExtraImport": true,
        "detail": "contacts.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "importPath": "contacts.models",
        "description": "contacts.models",
        "isExtraImport": true,
        "detail": "contacts.models",
        "documentation": {}
    },
    {
        "label": "Contact",
        "importPath": "contacts.models",
        "description": "contacts.models",
        "isExtraImport": true,
        "detail": "contacts.models",
        "documentation": {}
    },
    {
        "label": "PAYS",
        "importPath": "forms.pays",
        "description": "forms.pays",
        "isExtraImport": true,
        "detail": "forms.pays",
        "documentation": {}
    },
    {
        "label": "PAYS",
        "importPath": "forms.pays",
        "description": "forms.pays",
        "isExtraImport": true,
        "detail": "forms.pays",
        "documentation": {}
    },
    {
        "label": "PAYS",
        "importPath": "forms.pays",
        "description": "forms.pays",
        "isExtraImport": true,
        "detail": "forms.pays",
        "documentation": {}
    },
    {
        "label": "PAYS",
        "importPath": "forms.pays",
        "description": "forms.pays",
        "isExtraImport": true,
        "detail": "forms.pays",
        "documentation": {}
    },
    {
        "label": "PAYS",
        "importPath": "forms.pays",
        "description": "forms.pays",
        "isExtraImport": true,
        "detail": "forms.pays",
        "documentation": {}
    },
    {
        "label": "contact_view",
        "importPath": "contacts.views",
        "description": "contacts.views",
        "isExtraImport": true,
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "upload_contact_csv",
        "importPath": "contacts.views",
        "description": "contacts.views",
        "isExtraImport": true,
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "export_contact_csv",
        "importPath": "contacts.views",
        "description": "contacts.views",
        "isExtraImport": true,
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "export_contact_xls",
        "importPath": "contacts.views",
        "description": "contacts.views",
        "isExtraImport": true,
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "export_contact_pdf",
        "importPath": "contacts.views",
        "description": "contacts.views",
        "isExtraImport": true,
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "xlwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xlwt",
        "description": "xlwt",
        "detail": "xlwt",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "importPath": "contacts.forms",
        "description": "contacts.forms",
        "isExtraImport": true,
        "detail": "contacts.forms",
        "documentation": {}
    },
    {
        "label": "dashboard_view",
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "isExtraImport": true,
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "dashboard_admin_view",
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "isExtraImport": true,
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "Cdr",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Cel",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Ps_aors",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Ps_auths",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Endpoints",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Contexts",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Extensions",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Cdr",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Cel",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "IvrDetails",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Contacts",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "AsteriskPublication",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Endpoints_id_ips",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "QueueMember",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "QueuesConfig",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "QueueRules",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Sip_conf",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Sippeers",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "VoiceMail",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Cdr",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Cel",
        "importPath": "pbx.models",
        "description": "pbx.models",
        "isExtraImport": true,
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Dat",
        "importPath": "dat.models",
        "description": "dat.models",
        "isExtraImport": true,
        "detail": "dat.models",
        "documentation": {}
    },
    {
        "label": "Dat",
        "importPath": "dat.models",
        "description": "dat.models",
        "isExtraImport": true,
        "detail": "dat.models",
        "documentation": {}
    },
    {
        "label": "Dat",
        "importPath": "dat.models",
        "description": "dat.models",
        "isExtraImport": true,
        "detail": "dat.models",
        "documentation": {}
    },
    {
        "label": "BOUND",
        "importPath": "dat.models",
        "description": "dat.models",
        "isExtraImport": true,
        "detail": "dat.models",
        "documentation": {}
    },
    {
        "label": "Dat",
        "importPath": "dat.models",
        "description": "dat.models",
        "isExtraImport": true,
        "detail": "dat.models",
        "documentation": {}
    },
    {
        "label": "Recouvrement",
        "importPath": "recouvrement.models",
        "description": "recouvrement.models",
        "isExtraImport": true,
        "detail": "recouvrement.models",
        "documentation": {}
    },
    {
        "label": "Recouvrement",
        "importPath": "recouvrement.models",
        "description": "recouvrement.models",
        "isExtraImport": true,
        "detail": "recouvrement.models",
        "documentation": {}
    },
    {
        "label": "Recouvrement",
        "importPath": "recouvrement.models",
        "description": "recouvrement.models",
        "isExtraImport": true,
        "detail": "recouvrement.models",
        "documentation": {}
    },
    {
        "label": "Recouvrement",
        "importPath": "recouvrement.models",
        "description": "recouvrement.models",
        "isExtraImport": true,
        "detail": "recouvrement.models",
        "documentation": {}
    },
    {
        "label": "Renouvellement",
        "importPath": "renouvellement.models",
        "description": "renouvellement.models",
        "isExtraImport": true,
        "detail": "renouvellement.models",
        "documentation": {}
    },
    {
        "label": "Renouvellement",
        "importPath": "renouvellement.models",
        "description": "renouvellement.models",
        "isExtraImport": true,
        "detail": "renouvellement.models",
        "documentation": {}
    },
    {
        "label": "Renouvellement",
        "importPath": "renouvellement.models",
        "description": "renouvellement.models",
        "isExtraImport": true,
        "detail": "renouvellement.models",
        "documentation": {}
    },
    {
        "label": "Renouvellement",
        "importPath": "renouvellement.models",
        "description": "renouvellement.models",
        "isExtraImport": true,
        "detail": "renouvellement.models",
        "documentation": {}
    },
    {
        "label": "bootstrap_datepicker_plus",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bootstrap_datepicker_plus",
        "description": "bootstrap_datepicker_plus",
        "detail": "bootstrap_datepicker_plus",
        "documentation": {}
    },
    {
        "label": "DatePickerInput",
        "importPath": "bootstrap_datepicker_plus",
        "description": "bootstrap_datepicker_plus",
        "isExtraImport": true,
        "detail": "bootstrap_datepicker_plus",
        "documentation": {}
    },
    {
        "label": "dat_add",
        "importPath": "dat.views",
        "description": "dat.views",
        "isExtraImport": true,
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "dat_list",
        "importPath": "dat.views",
        "description": "dat.views",
        "isExtraImport": true,
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "dat_update",
        "importPath": "dat.views",
        "description": "dat.views",
        "isExtraImport": true,
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "dat_view",
        "importPath": "dat.views",
        "description": "dat.views",
        "isExtraImport": true,
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "dat_destroy",
        "importPath": "dat.views",
        "description": "dat.views",
        "isExtraImport": true,
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "export_dat_xls",
        "importPath": "dat.views",
        "description": "dat.views",
        "isExtraImport": true,
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "export_dat_csv",
        "importPath": "dat.views",
        "description": "dat.views",
        "isExtraImport": true,
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "DatForm",
        "importPath": "dat.forms",
        "description": "dat.forms",
        "isExtraImport": true,
        "detail": "dat.forms",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "QuerySet",
        "importPath": "django.db.models.query",
        "description": "django.db.models.query",
        "isExtraImport": true,
        "detail": "django.db.models.query",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "smart_str",
        "importPath": "django.utils.encoding",
        "description": "django.utils.encoding",
        "isExtraImport": true,
        "detail": "django.utils.encoding",
        "documentation": {}
    },
    {
        "label": "Kyc",
        "importPath": "forms.models",
        "description": "forms.models",
        "isExtraImport": true,
        "detail": "forms.models",
        "documentation": {}
    },
    {
        "label": "Kyc",
        "importPath": "forms.models",
        "description": "forms.models",
        "isExtraImport": true,
        "detail": "forms.models",
        "documentation": {}
    },
    {
        "label": "Kyc",
        "importPath": "forms.models",
        "description": "forms.models",
        "isExtraImport": true,
        "detail": "forms.models",
        "documentation": {}
    },
    {
        "label": "scripting_forms",
        "importPath": "forms.views",
        "description": "forms.views",
        "isExtraImport": true,
        "detail": "forms.views",
        "documentation": {}
    },
    {
        "label": "enquetes_view",
        "importPath": "forms.views",
        "description": "forms.views",
        "isExtraImport": true,
        "detail": "forms.views",
        "documentation": {}
    },
    {
        "label": "scripting_list",
        "importPath": "forms.views",
        "description": "forms.views",
        "isExtraImport": true,
        "detail": "forms.views",
        "documentation": {}
    },
    {
        "label": "scripting_forms_edit",
        "importPath": "forms.views",
        "description": "forms.views",
        "isExtraImport": true,
        "detail": "forms.views",
        "documentation": {}
    },
    {
        "label": "KycForm",
        "importPath": "forms.forms",
        "description": "forms.forms",
        "isExtraImport": true,
        "detail": "forms.forms",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "APPS",
        "importPath": "pbx.extensionsApps",
        "description": "pbx.extensionsApps",
        "isExtraImport": true,
        "detail": "pbx.extensionsApps",
        "documentation": {}
    },
    {
        "label": "MUSICONHOLD",
        "importPath": "pbx.extensionsApps",
        "description": "pbx.extensionsApps",
        "isExtraImport": true,
        "detail": "pbx.extensionsApps",
        "documentation": {}
    },
    {
        "label": "cdr_view",
        "importPath": "pbx.views",
        "description": "pbx.views",
        "isExtraImport": true,
        "detail": "pbx.views",
        "documentation": {}
    },
    {
        "label": "cdr_detail",
        "importPath": "pbx.views",
        "description": "pbx.views",
        "isExtraImport": true,
        "detail": "pbx.views",
        "documentation": {}
    },
    {
        "label": "cel_view",
        "importPath": "pbx.views",
        "description": "pbx.views",
        "isExtraImport": true,
        "detail": "pbx.views",
        "documentation": {}
    },
    {
        "label": "cel_detail",
        "importPath": "pbx.views",
        "description": "pbx.views",
        "isExtraImport": true,
        "detail": "pbx.views",
        "documentation": {}
    },
    {
        "label": "ReportFilterForm",
        "importPath": "pbx.forms",
        "description": "pbx.forms",
        "isExtraImport": true,
        "detail": "pbx.forms",
        "documentation": {}
    },
    {
        "label": "recouvrement_add",
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "isExtraImport": true,
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "recouvrement_list",
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "isExtraImport": true,
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "recouvrement_view",
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "isExtraImport": true,
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "recouvrement_update",
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "isExtraImport": true,
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "recouvrement_destroy",
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "isExtraImport": true,
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "RecouvrementForm",
        "importPath": "recouvrement.forms",
        "description": "recouvrement.forms",
        "isExtraImport": true,
        "detail": "recouvrement.forms",
        "documentation": {}
    },
    {
        "label": "renouvellement_add",
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "isExtraImport": true,
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "renouvellement_list",
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "isExtraImport": true,
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "renouvellement_update",
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "isExtraImport": true,
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "renouvellement_view",
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "isExtraImport": true,
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "renouvellement_destroy",
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "isExtraImport": true,
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "RenouvellementForm",
        "importPath": "renouvellement.forms",
        "description": "renouvellement.forms",
        "isExtraImport": true,
        "detail": "renouvellement.forms",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "RequestContext",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "importPath": "django.views.defaults",
        "description": "django.views.defaults",
        "isExtraImport": true,
        "detail": "django.views.defaults",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Campagne',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0002_auto_20210502_1400",
        "description": "accounts.migrations.0002_auto_20210502_1400",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='profile',\n            name='sexe',\n            field=models.CharField(blank=True, choices=[('Madame', 'Madame'), ('Monsieur', 'Monsieur')], max_length=100, null=True),\n        ),",
        "detail": "accounts.migrations.0002_auto_20210502_1400",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0003_profile_is_online",
        "description": "accounts.migrations.0003_profile_is_online",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('accounts', '0002_auto_20210502_1400'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='profile',\n            name='is_online',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "accounts.migrations.0003_profile_is_online",
        "documentation": {}
    },
    {
        "label": "ProfileInline",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class ProfileInline(admin.StackedInline):\n    model = Profile\n    can_delete = False\n    verbose_name_plural = 'Profile'\n    fk_name = 'user'\nclass CustomUserAdmin(UserAdmin):\n    inlines = (ProfileInline, )\n    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'get_is_online', 'get_campagne', 'get_role',)\n    list_select_related = ('profile', )\n    def get_is_online(self, instance):",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    inlines = (ProfileInline, )\n    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'get_is_online', 'get_campagne', 'get_role',)\n    list_select_related = ('profile', )\n    def get_is_online(self, instance):\n        return instance.profile.is_online\n    get_is_online.short_description = 'is_online'\n    def get_campagne(self, instance):\n        return instance.profile.campagne\n    get_campagne.short_description = 'Campagne'",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "CampagneAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class CampagneAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\nadmin.site.unregister(User)\nadmin.site.register(User, CustomUserAdmin)\nadmin.site.register(Campagne)",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_header",
        "kind": 5,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "admin.site.site_header = 'CRM ADMIN'\nadmin.site.site_title = \"Interface d'administration des comptes\"\nfrom accounts.models import Profile, Campagne\n# Register your models here.\nclass ProfileInline(admin.StackedInline):\n    model = Profile\n    can_delete = False\n    verbose_name_plural = 'Profile'\n    fk_name = 'user'\nclass CustomUserAdmin(UserAdmin):",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "admin.site.site_title",
        "kind": 5,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "admin.site.site_title = \"Interface d'administration des comptes\"\nfrom accounts.models import Profile, Campagne\n# Register your models here.\nclass ProfileInline(admin.StackedInline):\n    model = Profile\n    can_delete = False\n    verbose_name_plural = 'Profile'\n    fk_name = 'user'\nclass CustomUserAdmin(UserAdmin):\n    inlines = (ProfileInline, )",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    name = 'accounts'",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "SignInForm",
        "kind": 6,
        "importPath": "accounts.forms",
        "description": "accounts.forms",
        "peekOfCode": "class SignInForm(forms.ModelForm):\n    class Meta:\n        field = ('username', 'password')\n        model = User\n    username = forms.CharField(\n        label = 'Username',\n        required = True,\n        widget = forms.TextInput(\n            attrs = {\n                \"class\": \"form-control\",",
        "detail": "accounts.forms",
        "documentation": {}
    },
    {
        "label": "Campagne",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Campagne(models.Model):\n    name = models.CharField(max_length=100, null=True, blank=True)\n    description = models.TextField(null=True, blank=True)\n    def __str__(self):\n        return self.name\nclass Profile(models.Model):\n    ADMIN = 'Admin'\n    SUPERVISOR = 'Supervisor'\n    AGENT = 'Agent'\n    CLIENT = 'Client'",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Profile(models.Model):\n    ADMIN = 'Admin'\n    SUPERVISOR = 'Supervisor'\n    AGENT = 'Agent'\n    CLIENT = 'Client'\n    ROLE_CHOICES = (\n        ('ADMIN', 'Admin'),\n        ('SUPERVISOR', 'Supervisor'),\n        ('AGENT', 'Agent'),\n        ('CLIENT', 'Client'),",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "create_or_update_user_profile",
        "kind": 2,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "def create_or_update_user_profile(sender, instance, created, **kwargs):\n    if created:\n        Profile.objects.create(user=instance)\n    instance.profile.save()",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path('', login_view, name='login'),\n    path('register/', register_view, name='register'), \n    path('logout/', logout_view, name='logout'),\n    path('profile/', profile, name='profile'),\n    path('profile_edit/<int:pk>/user', profile, name='profile_edit'),\n]",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "got_online",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def got_online(sender, user, request, **kwargs):    \n    user.profile.is_online = True\n    user.profile.save()\n@receiver(user_logged_out)\ndef got_offline(sender, user, request, **kwargs):   \n    user.profile.is_online = False\n    user.profile.save()\ndef login_view(request):\n    if request.method == 'POST':\n        username = request.POST['username']",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "got_offline",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def got_offline(sender, user, request, **kwargs):   \n    user.profile.is_online = False\n    user.profile.save()\ndef login_view(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = auth.authenticate(username=username, password=password)\n        if user is not None:\n            auth.login(request, user)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def login_view(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = auth.authenticate(username=username, password=password)\n        if user is not None:\n            auth.login(request, user)\n            messages.success(request,\"! vous êtes authentifiés!! .\")\n            return redirect('dashboard:dashboard')\n        else:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "register_view",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def register_view(request):\n    if request.method == 'POST':\n        # Get form vales\n        first_name = request.POST['first_name']\n        last_name = request.POST['last_name']\n        username = request.POST['username']\n        email = request.POST['email']\n        # statut = request.POST['statut']\n        password = request.POST['password']\n        password2 = request.POST['password2']",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def logout_view(request):\n    if request.method == 'GET':\n        auth.logout(request)\n        messages.success(request, \"Vous êtes déconnecté.\")\n        return redirect('/')\n    else:\n        return redirect('/')\n@login_required\ndef profile(request):\n    # user = request.user",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def profile(request):\n    # user = request.user\n    # profile = Profile.objects.get(id=user.pk)\n    profile = Profile.objects.get(user=request.user)\n    context = {\n        'profile': profile\n    }\n    template_name='pages/accounts/profile.html'\n    return render(request, template_name, context)\n@login_required",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "profile_edit",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def profile_edit(request):\n    pk = request.user\n    profile = Profile.objects.get(pk=pk)\n    # if request.method=='POST':\n    # try:\n    #     profile=Profile.objects.get(user=request.user)\n    # except:\n    #     profile=Profile()\n    #     profile.user=request.user\n    # profile.profile_picture=request.FILES['photo']",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "acquisition.migrations.0001_initial",
        "description": "acquisition.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Acquisition',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "acquisition.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AcquisitionConfig",
        "kind": 6,
        "importPath": "acquisition.apps",
        "description": "acquisition.apps",
        "peekOfCode": "class AcquisitionConfig(AppConfig):\n    name = 'acquisition'",
        "detail": "acquisition.apps",
        "documentation": {}
    },
    {
        "label": "AcquisitionForm",
        "kind": 6,
        "importPath": "acquisition.forms",
        "description": "acquisition.forms",
        "peekOfCode": "class AcquisitionForm(forms.ModelForm):\n    class Meta:\n        model = Acquisition\n        fields = (\n            'questions1', 'questions3', 'questions4', 'questions5', 'questions6', \n            'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province', \n            'Tel1', 'Email', 'Statut', 'Bound', 'Remarque', 'CommentaireQ5', 'CommentaireQ6',\n        )\n    questions1 = forms.CharField(\n        label='',",
        "detail": "acquisition.forms",
        "documentation": {}
    },
    {
        "label": "Acquisition",
        "kind": 6,
        "importPath": "acquisition.models",
        "description": "acquisition.models",
        "peekOfCode": "class Acquisition(models.Model):\n    user             = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date     = models.DateTimeField(auto_now_add=True)\n    questions1       = models.CharField(max_length=200, null=True, default='-')\n    # questions2       = models.CharField(max_length=200, null=True, default='-')\n    questions3       = models.CharField(max_length=200, choices=SERVICES, null=True, default='-')\n    questions4       = models.CharField(max_length=200, null=True, default='-')\n    questions5       = models.CharField(max_length=200, null=True, default='-')\n    questions6       = models.CharField(max_length=200, null=True, default='-')\n    Nom              = models.CharField(max_length=100, null=True, blank=True, default='-')",
        "detail": "acquisition.models",
        "documentation": {}
    },
    {
        "label": "SERVICES",
        "kind": 5,
        "importPath": "acquisition.models",
        "description": "acquisition.models",
        "peekOfCode": "SERVICES = (\n    ('Crédit', 'Crédit'),\n    ('Comptes/épargne', 'Comptes/épargne'),\n    ('Les deux', 'Les deux'),\n    ('Autres', 'Autres'),\n)\nclass Acquisition(models.Model):\n    user             = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date     = models.DateTimeField(auto_now_add=True)\n    questions1       = models.CharField(max_length=200, null=True, default='-')",
        "detail": "acquisition.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "acquisition.urls",
        "description": "acquisition.urls",
        "peekOfCode": "app_name = 'acquisition'\nurlpatterns = [\n    path('acquisition_add/', acquisition_add, name='acquisition_add'),\n    path('acquisition_list/', acquisition_list, name='acquisition_list'),\n    path('acquisition_update/<int:id>/', acquisition_update, name='acquisition_update'),\n    path('acquisition_view/<int:id>/', acquisition_view, name='acquisition_view'),\n    path('acquisition_destroy/<int:id>/', acquisition_destroy, name='acquisition_destroy')\n]",
        "detail": "acquisition.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "acquisition.urls",
        "description": "acquisition.urls",
        "peekOfCode": "urlpatterns = [\n    path('acquisition_add/', acquisition_add, name='acquisition_add'),\n    path('acquisition_list/', acquisition_list, name='acquisition_list'),\n    path('acquisition_update/<int:id>/', acquisition_update, name='acquisition_update'),\n    path('acquisition_view/<int:id>/', acquisition_view, name='acquisition_view'),\n    path('acquisition_destroy/<int:id>/', acquisition_destroy, name='acquisition_destroy')\n]",
        "detail": "acquisition.urls",
        "documentation": {}
    },
    {
        "label": "acquisition_add",
        "kind": 2,
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "peekOfCode": "def acquisition_add(request):\n    \"\"\"\n        Fonction Add new object\n    \"\"\"\n    if request.method == 'POST':\n        # create a form instance and populate it with data from the request:\n        form = AcquisitionForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required",
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "acquisition_list",
        "kind": 2,
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "peekOfCode": "def acquisition_list(request): \n    \"\"\"\n        Fonction List objects\n    \"\"\" \n    user = request.user\n    acquisition_count = Acquisition.objects.filter(user=user).order_by('-created_date').count()\n    acquisition = Acquisition.objects.filter(user=user).order_by('-created_date')\n    paginator = Paginator(acquisition, 10)\n    page = request.GET.get('page')\n    try:",
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "acquisition_view",
        "kind": 2,
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "peekOfCode": "def acquisition_view(request, id):  \n    \"\"\"\n        Fonction Detail\n    \"\"\"\n    user = request.user\n    acquisition = Acquisition.objects.filter(user=user).get(id=id)\n    context = {\n        'acquisition': acquisition,\n    }  \n    template_name = 'pages/acquisition/acquisition_view.html'",
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "acquisition_update",
        "kind": 2,
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "peekOfCode": "def acquisition_update(request, id):\n    \"\"\"\n        Fonction de Mis à jour\n    \"\"\"\n    acquisition = Acquisition.objects.get(id=id)\n    form = DatForm(request.POST, instance=dat)  \n    if form.is_valid():  \n        form.user = request.user\n        form.save()  \n        messages.success(request, \"Acquisition modifié!\")",
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "acquisition_destroy",
        "kind": 2,
        "importPath": "acquisition.views",
        "description": "acquisition.views",
        "peekOfCode": "def acquisition_destroy(request, id):\n    \"\"\"\n        Fonction de Suppresion\n    \"\"\"\n    user = request.user\n    acquisition = Acquisition.objects.filter(user=user).get(id=id)  \n    acquisition.delete()  \n    return redirect(\"acquisition:acquisition_list\")",
        "detail": "acquisition.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "agenda.migrations.0001_initial",
        "description": "agenda.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Note',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "agenda.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "AgendaAdmin",
        "kind": 6,
        "importPath": "agenda.admin",
        "description": "agenda.admin",
        "peekOfCode": "class AgendaAdmin(admin.ModelAdmin):\n    pass\n@admin.register(Note)\nclass NoteAdmin(admin.ModelAdmin):\n    list_display = (\n        'title', 'description', 'theme', 'created_date', 'user',\n    )",
        "detail": "agenda.admin",
        "documentation": {}
    },
    {
        "label": "NoteAdmin",
        "kind": 6,
        "importPath": "agenda.admin",
        "description": "agenda.admin",
        "peekOfCode": "class NoteAdmin(admin.ModelAdmin):\n    list_display = (\n        'title', 'description', 'theme', 'created_date', 'user',\n    )",
        "detail": "agenda.admin",
        "documentation": {}
    },
    {
        "label": "AgendaConfig",
        "kind": 6,
        "importPath": "agenda.apps",
        "description": "agenda.apps",
        "peekOfCode": "class AgendaConfig(AppConfig):\n    name = 'agenda'",
        "detail": "agenda.apps",
        "documentation": {}
    },
    {
        "label": "NoteForm",
        "kind": 6,
        "importPath": "agenda.forms",
        "description": "agenda.forms",
        "peekOfCode": "class NoteForm(ModelForm):\n  class Meta:\n    model = Note\n    fields = ('title', 'description', 'theme',)\n    title = forms.CharField(\n      label='',\n      required=True,\n      widget=forms.TextInput(\n        attrs={\n            \"class\": \"form-control\",",
        "detail": "agenda.forms",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "agenda.helper",
        "description": "agenda.helper",
        "peekOfCode": "def get_current_user():\n    active_sessions = Session.objects.filter(expire_date__gte=timezone.now())\n    user_id_list = []\n    for session in active_sessions:\n        data = session.get_decoded()\n        user_id_list.append(data.get('_auth_user_id', None))\n    user = User.objects.get(id=user_id_list[0])\n    return user",
        "detail": "agenda.helper",
        "documentation": {}
    },
    {
        "label": "Note",
        "kind": 6,
        "importPath": "agenda.models",
        "description": "agenda.models",
        "peekOfCode": "class Note(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200, unique=True)\n    description = models.TextField()\n    theme = models.CharField(max_length=15, choices=THEME)\n    created_date = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return self.title\n    def get_absolute_url(self):\n        return reverse('agenda:note_detail', args=(self.id,))",
        "detail": "agenda.models",
        "documentation": {}
    },
    {
        "label": "THEME",
        "kind": 5,
        "importPath": "agenda.models",
        "description": "agenda.models",
        "peekOfCode": "THEME = (\n    ('bg-primary', 'Blue'),\n    ('bg-success', 'Vert'), \n    ('bg-warning', 'Jaune'),\n    ('bg-dark', 'Noir'),\n    ('bg-pink', 'Violet'),\n    ('bg-danger', 'Rouge'), \n)\n# Create your models here.\nclass Note(models.Model):",
        "detail": "agenda.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "agenda.urls",
        "description": "agenda.urls",
        "peekOfCode": "app_name = 'agenda'\nurlpatterns = [\n    path('agenda_view/', agenda_view, name='agenda_view'),\n    path('agenda_detail/', agenda_detail, name='agenda_detail'),\n    path('notes/note_view/', note_view, name='note_view'),\n    path('notes/note_detail/<int:id>/', note_detail, name='note_detail'),\n    path('notes/<int:pk>/remove', NoteDeleteView.as_view(), name=\"remove_note\"),\n]",
        "detail": "agenda.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "agenda.urls",
        "description": "agenda.urls",
        "peekOfCode": "urlpatterns = [\n    path('agenda_view/', agenda_view, name='agenda_view'),\n    path('agenda_detail/', agenda_detail, name='agenda_detail'),\n    path('notes/note_view/', note_view, name='note_view'),\n    path('notes/note_detail/<int:id>/', note_detail, name='note_detail'),\n    path('notes/<int:pk>/remove', NoteDeleteView.as_view(), name=\"remove_note\"),\n]",
        "detail": "agenda.urls",
        "documentation": {}
    },
    {
        "label": "Calendar",
        "kind": 6,
        "importPath": "agenda.utils",
        "description": "agenda.utils",
        "peekOfCode": "class Calendar(HTMLCalendar):\n\tdef __init__(self, year=None, month=None):\n\t\tself.year = year\n\t\tself.month = month\n\t\tsuper(Calendar, self).__init__()\n\t# formats a day as a td\n\t# filter events by day\n\tdef formatday(self, day, events):\n\t\tevents_per_day = events.filter(start_time__day=day)\n\t\td = ''",
        "detail": "agenda.utils",
        "documentation": {}
    },
    {
        "label": "\t\tself.year",
        "kind": 5,
        "importPath": "agenda.utils",
        "description": "agenda.utils",
        "peekOfCode": "\t\tself.year = year\n\t\tself.month = month\n\t\tsuper(Calendar, self).__init__()\n\t# formats a day as a td\n\t# filter events by day\n\tdef formatday(self, day, events):\n\t\tevents_per_day = events.filter(start_time__day=day)\n\t\td = ''\n\t\tfor event in events_per_day:\n\t\t\td += f'<li> {event.get_html_url} </li>'",
        "detail": "agenda.utils",
        "documentation": {}
    },
    {
        "label": "\t\tself.month",
        "kind": 5,
        "importPath": "agenda.utils",
        "description": "agenda.utils",
        "peekOfCode": "\t\tself.month = month\n\t\tsuper(Calendar, self).__init__()\n\t# formats a day as a td\n\t# filter events by day\n\tdef formatday(self, day, events):\n\t\tevents_per_day = events.filter(start_time__day=day)\n\t\td = ''\n\t\tfor event in events_per_day:\n\t\t\td += f'<li> {event.get_html_url} </li>'\n\t\tif day != 0:",
        "detail": "agenda.utils",
        "documentation": {}
    },
    {
        "label": "\t\tevents_per_day",
        "kind": 5,
        "importPath": "agenda.utils",
        "description": "agenda.utils",
        "peekOfCode": "\t\tevents_per_day = events.filter(start_time__day=day)\n\t\td = ''\n\t\tfor event in events_per_day:\n\t\t\td += f'<li> {event.get_html_url} </li>'\n\t\tif day != 0:\n\t\t\treturn f\"<td><span class='date'>{day}</span><ul> {d} </ul></td>\"\n\t\treturn '<td></td>'\n\t# formats a week as a tr \n\tdef formatweek(self, theweek, events):\n\t\tweek = ''",
        "detail": "agenda.utils",
        "documentation": {}
    },
    {
        "label": "\t\td",
        "kind": 5,
        "importPath": "agenda.utils",
        "description": "agenda.utils",
        "peekOfCode": "\t\td = ''\n\t\tfor event in events_per_day:\n\t\t\td += f'<li> {event.get_html_url} </li>'\n\t\tif day != 0:\n\t\t\treturn f\"<td><span class='date'>{day}</span><ul> {d} </ul></td>\"\n\t\treturn '<td></td>'\n\t# formats a week as a tr \n\tdef formatweek(self, theweek, events):\n\t\tweek = ''\n\t\tfor d, weekday in theweek:",
        "detail": "agenda.utils",
        "documentation": {}
    },
    {
        "label": "\t\tweek",
        "kind": 5,
        "importPath": "agenda.utils",
        "description": "agenda.utils",
        "peekOfCode": "\t\tweek = ''\n\t\tfor d, weekday in theweek:\n\t\t\tweek += self.formatday(d, events)\n\t\treturn f'<tr> {week} </tr>'\n\t# formats a month as a table\n\t# filter events by year and month\n\tdef formatmonth(self, withyear=True):\n\t\tevents = Event.objects.filter(start_time__year=self.year, start_time__month=self.month)\n\t\tcal = f'<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"calendar\">\\n'\n\t\tcal += f'{self.formatmonthname(self.year, self.month, withyear=withyear)}\\n'",
        "detail": "agenda.utils",
        "documentation": {}
    },
    {
        "label": "\t\tevents",
        "kind": 5,
        "importPath": "agenda.utils",
        "description": "agenda.utils",
        "peekOfCode": "\t\tevents = Event.objects.filter(start_time__year=self.year, start_time__month=self.month)\n\t\tcal = f'<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"calendar\">\\n'\n\t\tcal += f'{self.formatmonthname(self.year, self.month, withyear=withyear)}\\n'\n\t\tcal += f'{self.formatweekheader()}\\n'\n\t\tfor week in self.monthdays2calendar(self.year, self.month):\n\t\t\tcal += f'{self.formatweek(week, events)}\\n'\n\t\treturn cal",
        "detail": "agenda.utils",
        "documentation": {}
    },
    {
        "label": "\t\tcal",
        "kind": 5,
        "importPath": "agenda.utils",
        "description": "agenda.utils",
        "peekOfCode": "\t\tcal = f'<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"calendar\">\\n'\n\t\tcal += f'{self.formatmonthname(self.year, self.month, withyear=withyear)}\\n'\n\t\tcal += f'{self.formatweekheader()}\\n'\n\t\tfor week in self.monthdays2calendar(self.year, self.month):\n\t\t\tcal += f'{self.formatweek(week, events)}\\n'\n\t\treturn cal",
        "detail": "agenda.utils",
        "documentation": {}
    },
    {
        "label": "NoteDeleteView",
        "kind": 6,
        "importPath": "agenda.views",
        "description": "agenda.views",
        "peekOfCode": "class NoteDeleteView(generic.DeleteView):\n    model = Note\n    login_url = '/accounts/login/'\n    template_name = 'pages/agendas/remove_note.html'\n    success_url = reverse_lazy('agenda:note_view')",
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "agenda_view",
        "kind": 2,
        "importPath": "agenda.views",
        "description": "agenda.views",
        "peekOfCode": "def agenda_view(request):\n    context = {}\n    template_name = 'pages/agendas/agenda_view.html'\n    return render(request, template_name, context)\n@login_required\ndef agenda_detail(request, agenda_id):\n    context = {}\n    template_name = 'pages/agendas/agenda_detail.html'\n    return render(request, template_name, context)\n@login_required",
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "agenda_detail",
        "kind": 2,
        "importPath": "agenda.views",
        "description": "agenda.views",
        "peekOfCode": "def agenda_detail(request, agenda_id):\n    context = {}\n    template_name = 'pages/agendas/agenda_detail.html'\n    return render(request, template_name, context)\n@login_required\ndef note_view(request):\n    user  = request.user\n    form = NoteForm(request.POST)\n    if request.method == 'POST':\n        if form.is_valid():",
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "note_view",
        "kind": 2,
        "importPath": "agenda.views",
        "description": "agenda.views",
        "peekOfCode": "def note_view(request):\n    user  = request.user\n    form = NoteForm(request.POST)\n    if request.method == 'POST':\n        if form.is_valid():\n            note = form.save(commit=False)\n            note.user = request.user\n            note.save()\n            messages.success(request, \"Note enregistrée!\")\n            # redirect to a new URL:",
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "note_detail",
        "kind": 2,
        "importPath": "agenda.views",
        "description": "agenda.views",
        "peekOfCode": "def note_detail(request, id):\n    note = Note.objects.get(id=id)\n    context = {\n        'note': note\n    }\n    template_name = 'pages/agendas/note_detail.html'\n    return render(request, template_name, context)\nclass NoteDeleteView(generic.DeleteView):\n    model = Note\n    login_url = '/accounts/login/'",
        "detail": "agenda.views",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "kind": 6,
        "importPath": "app.apps",
        "description": "app.apps",
        "peekOfCode": "class AppConfig(AppConfig):\n    name = 'app'",
        "detail": "app.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.urls",
        "description": "app.urls",
        "peekOfCode": "urlpatterns = [\n    path('', index_view, name='index'),\n]",
        "detail": "app.urls",
        "documentation": {}
    },
    {
        "label": "index_view",
        "kind": 2,
        "importPath": "app.views",
        "description": "app.views",
        "peekOfCode": "def index_view(request):\n    context = {}\n    template_name = 'pages/app/index.html'\n    return render(request, template_name, context)",
        "detail": "app.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "commprom.migrations.0001_initial",
        "description": "commprom.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Commprom',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "commprom.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "commprom.migrations.0002_auto_20210503_1112",
        "description": "commprom.migrations.0002_auto_20210503_1112",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('commprom', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='commprom',\n            name='Province',\n            field=models.CharField(blank=True, choices=[('--------', '--------'), ('Bas-Uele', 'Bas-Uele'), ('Équateur', 'Équateur'), ('Haut-Katanga', 'Haut-Katanga'), ('Haut-Lomami', 'Haut-Lomami'), ('Haut-Uele', 'Haut-Uele'), ('Ituri', 'Ituri'), ('Kasaï', 'Kasaï'), ('Kasaï-Central', 'Kasaï-Central'), ('Kasaï oriental', 'Kasaï oriental'), ('Kinshasa', 'Kinshasa'), ('Kongo central1', 'Kongo central1'), ('Kwango', 'Kwango'), ('Kwilu', 'Kwilu'), ('Lomami', 'Lomami'), ('Lualaba', 'Lualaba'), ('Mai-Ndombe', 'Mai-Ndombe'), ('Maniema', 'Maniema'), ('Mongala', 'Mongala'), ('Nord-Kivu', 'Nord-Kivu'), ('Nord-Ubangi', 'Nord-Ubangi'), ('Sankuru', 'Sankuru'), ('Sud-Kivu', 'Sud-Kivu'), ('Sud-Ubangi', 'Sud-Ubangi'), ('Tanganyika', 'Tanganyika'), ('Tshopo', 'Tshopo'), ('Tshuapa', 'Tshuapa')], default='Kinshasa', max_length=20, null=True),\n        ),",
        "detail": "commprom.migrations.0002_auto_20210503_1112",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "commprom.migrations.0003_commprom_remarque",
        "description": "commprom.migrations.0003_commprom_remarque",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('commprom', '0002_auto_20210503_1112'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='commprom',\n            name='Remarque',\n            field=models.CharField(max_length=200, null=True),\n        ),",
        "detail": "commprom.migrations.0003_commprom_remarque",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "commprom.migrations.0004_auto_20210503_2151",
        "description": "commprom.migrations.0004_auto_20210503_2151",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('commprom', '0003_commprom_remarque'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='commprom',\n            name='Email',\n            field=models.EmailField(blank=True, default='contact@advans.com', max_length=254, null=True),\n        ),",
        "detail": "commprom.migrations.0004_auto_20210503_2151",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "commprom.migrations.0005_auto_20210503_2158",
        "description": "commprom.migrations.0005_auto_20210503_2158",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('commprom', '0004_auto_20210503_2151'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='commprom',\n            name='Remarque',\n            field=models.CharField(blank=True, max_length=200, null=True),\n        ),",
        "detail": "commprom.migrations.0005_auto_20210503_2158",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "commprom.migrations.0006_auto_20210504_0711",
        "description": "commprom.migrations.0006_auto_20210504_0711",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('commprom', '0005_auto_20210503_2158'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='commprom',\n            name='Remarque',\n            field=models.CharField(blank=True, default='-', max_length=200, null=True),\n        ),",
        "detail": "commprom.migrations.0006_auto_20210504_0711",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "commprom.migrations.0007_auto_20210506_0952",
        "description": "commprom.migrations.0007_auto_20210506_0952",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('commprom', '0006_auto_20210504_0711'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='commprom',\n            name='Rue',\n            field=models.CharField(blank=True, default='-', max_length=100, null=True),\n        ),",
        "detail": "commprom.migrations.0007_auto_20210506_0952",
        "documentation": {}
    },
    {
        "label": "CommpromAdmin",
        "kind": 6,
        "importPath": "commprom.admin",
        "description": "commprom.admin",
        "peekOfCode": "class CommpromAdmin(admin.ModelAdmin):\n    list_display = (\n        'user', 'created_date', 'questions1', 'questions2', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Quartier', 'Commune', 'Province', \n        'Tel1', 'Email', 'Statut', 'Bound', 'Remarque'\n    )\n    list_filter = (\n        ('created_date', PastDateRangeFilter), \n        'user', 'Statut', 'Bound'\n    )\n    actions = [export_to_csv]",
        "detail": "commprom.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "commprom.admin",
        "description": "commprom.admin",
        "peekOfCode": "def export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(\n                                          opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields(\n    ) if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information",
        "detail": "commprom.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv.short_description",
        "kind": 5,
        "importPath": "commprom.admin",
        "description": "commprom.admin",
        "peekOfCode": "export_to_csv.short_description = 'Export to CSV'\nclass CommpromAdmin(admin.ModelAdmin):\n    list_display = (\n        'user', 'created_date', 'questions1', 'questions2', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Quartier', 'Commune', 'Province', \n        'Tel1', 'Email', 'Statut', 'Bound', 'Remarque'\n    )\n    list_filter = (\n        ('created_date', PastDateRangeFilter), \n        'user', 'Statut', 'Bound'\n    )",
        "detail": "commprom.admin",
        "documentation": {}
    },
    {
        "label": "CommpromConfig",
        "kind": 6,
        "importPath": "commprom.apps",
        "description": "commprom.apps",
        "peekOfCode": "class CommpromConfig(AppConfig):\n    name = 'commprom'",
        "detail": "commprom.apps",
        "documentation": {}
    },
    {
        "label": "CommpromForm",
        "kind": 6,
        "importPath": "commprom.forms",
        "description": "commprom.forms",
        "peekOfCode": "class CommpromForm(forms.ModelForm):\n    class Meta:\n        model = Commprom\n        fields = (\n            'questions1', 'questions2', 'Nom','Post_Nom',\n            'Prenom','Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province',\n            'Tel1','Email', 'Statut', 'Bound', 'Remarque',\n        )\n    questions1 = forms.CharField(\n        label='',",
        "detail": "commprom.forms",
        "documentation": {}
    },
    {
        "label": "Commprom",
        "kind": 6,
        "importPath": "commprom.models",
        "description": "commprom.models",
        "peekOfCode": "class Commprom(models.Model):\n    user             = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date     = models.DateTimeField(auto_now_add=True)\n    questions1       = models.CharField(max_length=200, null=True, default='-')\n    questions2       = models.CharField(max_length=200, null=True, default='-')\n    Nom              = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Post_Nom         = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Prenom           = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Numero           = models.CharField(max_length=20, null=True, blank=True, default='-', verbose_name='N°')\n    Rue              = models.CharField(max_length=100, null=True, blank=True, default='-')",
        "detail": "commprom.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "commprom.urls",
        "description": "commprom.urls",
        "peekOfCode": "urlpatterns = [\n    path('commprom_add/', commprom_add, name='commprom_add'),\n    path('commprom_list/', commprom_list, name='commprom_list'),\n    path('commprom_update/<int:id>/', commprom_update, name='commprom_update'),\n    path('commprom_view/<int:id>/', commprom_view, name='commprom_view'),\n    path('commprom_destroy/<int:id>/', commprom_destroy, name='commprom_destroy')\n]",
        "detail": "commprom.urls",
        "documentation": {}
    },
    {
        "label": "commprom_add",
        "kind": 2,
        "importPath": "commprom.views",
        "description": "commprom.views",
        "peekOfCode": "def commprom_add(request):  \n    \"\"\"\n        Fonction Add new object\n    \"\"\"\n    if request.method == 'POST':\n        # create a form instance and populate it with data from the request:\n        form = CommpromForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required",
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "commprom_list",
        "kind": 2,
        "importPath": "commprom.views",
        "description": "commprom.views",
        "peekOfCode": "def commprom_list(request): \n    \"\"\"\n        Fonction List objects\n    \"\"\" \n    user = request.user\n    commprom_count = Commprom.objects.filter(user=user).order_by('-created_date').count()\n    commprom = Commprom.objects.filter(user=user).order_by('-created_date')\n    paginator = Paginator(commprom, 10)\n    page = request.GET.get('page')\n    try:",
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "commprom_view",
        "kind": 2,
        "importPath": "commprom.views",
        "description": "commprom.views",
        "peekOfCode": "def commprom_view(request, id):  \n    \"\"\"\n        Fonction Detail\n    \"\"\"\n    user = request.user\n    commprom = Commprom.objects.filter(user=user).get(id=id)\n    context = {\n        'commprom': commprom,\n    }  \n    template_name = 'pages/commprom/commprom_view.html'",
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "commprom_update",
        "kind": 2,
        "importPath": "commprom.views",
        "description": "commprom.views",
        "peekOfCode": "def commprom_update(request, id):\n    \"\"\"\n        Fonction de Mis à jour\n    \"\"\"\n    commprom = Commprom.objects.get(id=id)  \n    form = CommpromForm(request.POST, instance=commprom)  \n    if form.is_valid():  \n        form.user = request.user\n        form.save()  \n        messages.success(request, \"Commerciale et promotion Modifié!\")",
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "commprom_destroy",
        "kind": 2,
        "importPath": "commprom.views",
        "description": "commprom.views",
        "peekOfCode": "def commprom_destroy(request, id):\n    \"\"\"\n        Fonction de Suppresion\n    \"\"\"\n    user = request.user\n    commprom = Commprom.objects.filter(user=user).get(id=id)  \n    commprom.delete()  \n    return redirect(\"commprom:commprom_list\")",
        "detail": "commprom.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "comptedormant.migrations.0001_initial",
        "description": "comptedormant.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Compter_dormant',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "comptedormant.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "comptedormant.migrations.0002_auto_20210505_0839",
        "description": "comptedormant.migrations.0002_auto_20210505_0839",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('comptedormant', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameModel(\n            old_name='Compter_dormant',\n            new_name='Compte_dormant',\n        ),",
        "detail": "comptedormant.migrations.0002_auto_20210505_0839",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "comptedormant.migrations.0003_compte_dormant_raison",
        "description": "comptedormant.migrations.0003_compte_dormant_raison",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('comptedormant', '0002_auto_20210505_0839'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='compte_dormant',\n            name='Raison',\n            field=models.CharField(default='-', max_length=200, null=True),\n        ),",
        "detail": "comptedormant.migrations.0003_compte_dormant_raison",
        "documentation": {}
    },
    {
        "label": "Compte_dormantAdmin",
        "kind": 6,
        "importPath": "comptedormant.admin",
        "description": "comptedormant.admin",
        "peekOfCode": "class Compte_dormantAdmin(admin.ModelAdmin):\n    list_display = (\n        'user', 'created_date', 'questions1', 'questions2', 'questions3', 'questions4', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province', \n        'Tel1', 'Email', 'Statut', 'Bound', 'Remarque'\n    )\n    list_filter = (\n        ('created_date', PastDateRangeFilter), \n        'user', 'Statut', 'Bound'\n    )\n    actions = [export_to_csv]",
        "detail": "comptedormant.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "comptedormant.admin",
        "description": "comptedormant.admin",
        "peekOfCode": "def export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(\n                                          opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields(\n    ) if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information",
        "detail": "comptedormant.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv.short_description",
        "kind": 5,
        "importPath": "comptedormant.admin",
        "description": "comptedormant.admin",
        "peekOfCode": "export_to_csv.short_description = 'Export to CSV'\nclass Compte_dormantAdmin(admin.ModelAdmin):\n    list_display = (\n        'user', 'created_date', 'questions1', 'questions2', 'questions3', 'questions4', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province', \n        'Tel1', 'Email', 'Statut', 'Bound', 'Remarque'\n    )\n    list_filter = (\n        ('created_date', PastDateRangeFilter), \n        'user', 'Statut', 'Bound'\n    )",
        "detail": "comptedormant.admin",
        "documentation": {}
    },
    {
        "label": "ComptedormantConfig",
        "kind": 6,
        "importPath": "comptedormant.apps",
        "description": "comptedormant.apps",
        "peekOfCode": "class ComptedormantConfig(AppConfig):\n    name = 'comptedormant'",
        "detail": "comptedormant.apps",
        "documentation": {}
    },
    {
        "label": "Compte_dormantForm",
        "kind": 6,
        "importPath": "comptedormant.forms",
        "description": "comptedormant.forms",
        "peekOfCode": "class Compte_dormantForm(forms.ModelForm):\n    class Meta:\n        model = Compte_dormant\n        fields = (\n            'questions1', 'questions2', 'questions3', 'questions4', \n            'Raison', 'Nom', \n            'Post_Nom', 'Prenom', \n            'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', \n            'Province',\n            'Tel1','Email', 'Statut', 'Bound', 'Remarque',",
        "detail": "comptedormant.forms",
        "documentation": {}
    },
    {
        "label": "Compte_dormant",
        "kind": 6,
        "importPath": "comptedormant.models",
        "description": "comptedormant.models",
        "peekOfCode": "class Compte_dormant(models.Model):\n    user             = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date     = models.DateTimeField(auto_now_add=True)\n    questions1       = models.CharField(max_length=200, null=True, default='-')\n    questions2       = models.CharField(max_length=200, null=True, default='-')\n    questions3       = models.CharField(max_length=200, null=True, default='-')\n    questions4       = models.CharField(max_length=200, null=True, default='-')\n    Raison           = models.CharField(max_length=200, null=True, default='-')\n    Nom              = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Post_Nom         = models.CharField(max_length=100, null=True, blank=True, default='-')",
        "detail": "comptedormant.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "comptedormant.urls",
        "description": "comptedormant.urls",
        "peekOfCode": "app_name = 'compte_dormant'\nurlpatterns = [\n    path('compte_dormant_add/', compte_dormant_add, name='compte_dormant_add'),\n    path('compte_dormant_list/', compte_dormant_list, name='compte_dormant_list'),\n    path('compte_dormant_update/<int:id>/', compte_dormant_update, name='compte_dormant_update'),\n    path('compte_dormant_view/<int:id>/', compte_dormant_view, name='compte_dormant_view'),\n    path('compte_dormant_destroy/<int:id>/', compte_dormant_destroy, name='compte_dormant_destroy')\n]",
        "detail": "comptedormant.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "comptedormant.urls",
        "description": "comptedormant.urls",
        "peekOfCode": "urlpatterns = [\n    path('compte_dormant_add/', compte_dormant_add, name='compte_dormant_add'),\n    path('compte_dormant_list/', compte_dormant_list, name='compte_dormant_list'),\n    path('compte_dormant_update/<int:id>/', compte_dormant_update, name='compte_dormant_update'),\n    path('compte_dormant_view/<int:id>/', compte_dormant_view, name='compte_dormant_view'),\n    path('compte_dormant_destroy/<int:id>/', compte_dormant_destroy, name='compte_dormant_destroy')\n]",
        "detail": "comptedormant.urls",
        "documentation": {}
    },
    {
        "label": "compte_dormant_add",
        "kind": 2,
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "peekOfCode": "def compte_dormant_add(request):\n    \"\"\"\n        Fonction Add new object\n    \"\"\"\n    if request.method == 'POST':\n        # create a form instance and populate it with data from the request:\n        form = Compte_dormantForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required",
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "compte_dormant_list",
        "kind": 2,
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "peekOfCode": "def compte_dormant_list(request): \n    \"\"\"\n        Fonction List objects\n    \"\"\" \n    user = request.user\n    compte_dormant_count = Compte_dormant.objects.filter(user=user).order_by('-created_date').count()\n    compte_dormant = Compte_dormant.objects.filter(user=user).order_by('-created_date')\n    paginator = Paginator(compte_dormant, 10)\n    page = request.GET.get('page')\n    try:",
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "compte_dormant_view",
        "kind": 2,
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "peekOfCode": "def compte_dormant_view(request, id):  \n    \"\"\"\n        Fonction Detail\n    \"\"\"\n    user = request.user\n    compte_dormant = Compte_dormant.objects.filter(user=user).get(id=id)\n    context = {\n        'compte_dormant': compte_dormant,\n    }\n    template_name = 'pages/compte_dormant/compte_dormant_view.html'",
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "compte_dormant_update",
        "kind": 2,
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "peekOfCode": "def compte_dormant_update(request, id):\n    \"\"\"\n        Fonction de Mis à jour\n    \"\"\"\n    compte_dormant = Compte_dormant.objects.get(id=id)\n    form = DatForm(request.POST, instance=Compte_dormant)\n    if form.is_valid():  \n        form.user = request.user\n        form.save()  \n        messages.success(request, \"Compte dormant modifié!\")",
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "compte_dormant_destroy",
        "kind": 2,
        "importPath": "comptedormant.views",
        "description": "comptedormant.views",
        "peekOfCode": "def compte_dormant_destroy(request, id):\n    \"\"\"\n        Fonction de Suppresion\n    \"\"\"\n    user = request.user\n    compte_dormant = Compte_dormant.objects.filter(user=user).get(id=id)  \n    compte_dormant.delete()  \n    return redirect(\"compte_dormant:compte_dormant_list\")",
        "detail": "comptedormant.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "contacts.migrations.0001_initial",
        "description": "contacts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Contact',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "contacts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "ContactAdmin",
        "kind": 6,
        "importPath": "contacts.admin",
        "description": "contacts.admin",
        "peekOfCode": "class ContactAdmin(admin.ModelAdmin):\n    list_display = (\n        'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Rue', 'Quartier', 'Commune', 'Ville',\n        'Province', 'Tel1', 'Tel2', 'Email', 'Website', 'Facebook', 'Instagram',\n        'Twitter', 'LinkedIn', 'Remarque', 'created_date'\n    )\n    list_filter = (\n        ('created_date', PastDateRangeFilter),\n    )\n    actions = [export_to_csv]",
        "detail": "contacts.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "contacts.admin",
        "description": "contacts.admin",
        "peekOfCode": "def export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(\n                                          opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields(\n    ) if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information",
        "detail": "contacts.admin",
        "documentation": {}
    },
    {
        "label": "ContactsConfig",
        "kind": 6,
        "importPath": "contacts.apps",
        "description": "contacts.apps",
        "peekOfCode": "class ContactsConfig(AppConfig):\n    name = 'contacts'",
        "detail": "contacts.apps",
        "documentation": {}
    },
    {
        "label": "ContactForm",
        "kind": 6,
        "importPath": "contacts.forms",
        "description": "contacts.forms",
        "peekOfCode": "class ContactForm(forms.ModelForm):\n    class Meta:\n        model = Contact\n        fields = (\n            'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province', 'Tel1', 'Tel2', 'Tel3',\n            'Email', 'Website', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn', 'Remarque'\n        )\n        Nom = forms.CharField(\n            label='',\n            required=True,",
        "detail": "contacts.forms",
        "documentation": {}
    },
    {
        "label": "Contact",
        "kind": 6,
        "importPath": "contacts.models",
        "description": "contacts.models",
        "peekOfCode": "class Contact(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date = models.DateTimeField(auto_now_add=True)\n    Nom             = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Post_Nom        = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Prenom          = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Numero          = models.CharField(max_length=20, null=True, blank=True, default='-', verbose_name='N°')\n    Rue             = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Quartier        = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Commune         = models.CharField(max_length=100, null=True, blank=True, default='-')",
        "detail": "contacts.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "contacts.urls",
        "description": "contacts.urls",
        "peekOfCode": "urlpatterns = [\n    path('contact_view/', contact_view, name='contact_view'),\n    path('upload/csv/', upload_contact_csv, name='upload_contact_csv'),\n    path('export/xls/', export_contact_xls, name='export_contact_xls'), \n    path('export/csv/', export_contact_csv, name='export_contact_csv'),\n    path('export/pdf/', export_contact_pdf, name='export_contact_pdf'),\n]",
        "detail": "contacts.urls",
        "documentation": {}
    },
    {
        "label": "contact_view",
        "kind": 2,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "def contact_view(request):\n    user = request.user\n    contact = Contact.objects.filter(user=user).order_by('-created_date')\n    paginator = Paginator(contact, 10)\n    page = request.GET.get('page')\n    try:\n        contact_list = paginator.page(page)\n    except PageNotAnInteger:\n        contact_list = paginator.page(1)\n    except EmptyPage:",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "upload_contact_csv",
        "kind": 2,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "def upload_contact_csv(request):\n\tdata = {}\n\tif \"GET\" == request.method:\n\t\treturn render(request, \"pages/contacts/upload_contact_csv.html\", data)\n    # if not GET, then proceed\n\ttry:\n\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tif not csv_file.name.endswith('.csv'):\n\t\t\tmessages.error(request,'File is not CSV type')\n\t\t\treturn HttpResponseRedirect(reverse(\"contacts:upload_contact_csv\"))",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "export_contact_xls",
        "kind": 2,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "def export_contact_xls(request):\n    user = request.user\n    response = HttpResponse(content_type='application/ms-excel')\n    response['Content-Disposition'] = 'attachment; filename=\"contact.xls\"'\n    wb = xlwt.Workbook(encoding='utf-8')\n    ws = wb.add_sheet('Contact')\n    # Sheet header, first row\n    row_num = 0\n    font_style = xlwt.XFStyle()\n    font_style.font.bold = True",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "export_contact_csv",
        "kind": 2,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "def export_contact_csv(request):\n    user = request.user\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"contact.csv\"'\n    writer = csv.writer(response)\n    writer.writerow(['Nom', 'Post_Nom', 'Prenom', 'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province', 'Téléphone 1', 'Téléphone 2', \n\t'Téléphone 3', 'Email', 'Website', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn', 'Remarque'])\n    rows = Contact.objects.filter(user=user).values_list('Nom', 'Post_Nom', 'Prenom', 'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province', 'Tel1', 'Tel2', 'Tel3',\n            'Email', 'Website', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn', 'Remarque')\n    for row in rows:",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "export_contact_pdf",
        "kind": 2,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "def export_contact_pdf(request):\n\tpass",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "\tdata",
        "kind": 5,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "\tdata = {}\n\tif \"GET\" == request.method:\n\t\treturn render(request, \"pages/contacts/upload_contact_csv.html\", data)\n    # if not GET, then proceed\n\ttry:\n\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tif not csv_file.name.endswith('.csv'):\n\t\t\tmessages.error(request,'File is not CSV type')\n\t\t\treturn HttpResponseRedirect(reverse(\"contacts:upload_contact_csv\"))\n    # if file is too large, return",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "\t\tcsv_file",
        "kind": 5,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "\t\tcsv_file = request.FILES[\"csv_file\"]\n\t\tif not csv_file.name.endswith('.csv'):\n\t\t\tmessages.error(request,'File is not CSV type')\n\t\t\treturn HttpResponseRedirect(reverse(\"contacts:upload_contact_csv\"))\n    # if file is too large, return\n\t\tif csv_file.multiple_chunks():\n\t\t\tmessages.error(request,\"Uploaded file is too big (%.2f MB).\" % (csv_file.size/(1000*1000),))\n\t\t\treturn HttpResponseRedirect(reverse(\"contacts:upload_contact_csv\"))\n\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "\t\tfile_data",
        "kind": 5,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "\t\tfile_data = csv_file.read().decode(\"utf-8\")\t\t\n\t\tlines = file_data.split(\"\\n\")\n\t\t# loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {\"Nom\", \"Post_Nom\", \"Prenom\", \"Numero\", \"Quartier\", \"Commune\", \"Province\", \"Pays\", \"Tel1\", \"Tel2\", \"Email\",\n                     \"Website\", \"Facebook\", \"Instagram\", \"Twitter\", \"LinkedIn\", \"Remarque\", \"user\", \"created_date\"}\n\t\t\t# data_dict[\"Nom\"] = fields[0]\n\t\t\t# data_dict[\"Post_Nom\"] = fields[1]\n\t\t\t# data_dict[\"Prenom\"] = fields[2]",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "\t\tlines",
        "kind": 5,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "\t\tlines = file_data.split(\"\\n\")\n\t\t# loop over the lines and save them in db. If error , store as string and then display\n\t\tfor line in lines:\t\t\t\t\t\t\n\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {\"Nom\", \"Post_Nom\", \"Prenom\", \"Numero\", \"Quartier\", \"Commune\", \"Province\", \"Pays\", \"Tel1\", \"Tel2\", \"Email\",\n                     \"Website\", \"Facebook\", \"Instagram\", \"Twitter\", \"LinkedIn\", \"Remarque\", \"user\", \"created_date\"}\n\t\t\t# data_dict[\"Nom\"] = fields[0]\n\t\t\t# data_dict[\"Post_Nom\"] = fields[1]\n\t\t\t# data_dict[\"Prenom\"] = fields[2]\n\t\t\t# data_dict[\"Numero\"] = fields[3]",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tfields",
        "kind": 5,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "\t\t\tfields = line.split(\",\")\n\t\t\tdata_dict = {\"Nom\", \"Post_Nom\", \"Prenom\", \"Numero\", \"Quartier\", \"Commune\", \"Province\", \"Pays\", \"Tel1\", \"Tel2\", \"Email\",\n                     \"Website\", \"Facebook\", \"Instagram\", \"Twitter\", \"LinkedIn\", \"Remarque\", \"user\", \"created_date\"}\n\t\t\t# data_dict[\"Nom\"] = fields[0]\n\t\t\t# data_dict[\"Post_Nom\"] = fields[1]\n\t\t\t# data_dict[\"Prenom\"] = fields[2]\n\t\t\t# data_dict[\"Numero\"] = fields[3]\n\t\t\ttry:\n\t\t\t\tform = Contact(data_dict)\n\t\t\t\tif form.is_valid():",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata_dict",
        "kind": 5,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "\t\t\tdata_dict = {\"Nom\", \"Post_Nom\", \"Prenom\", \"Numero\", \"Quartier\", \"Commune\", \"Province\", \"Pays\", \"Tel1\", \"Tel2\", \"Email\",\n                     \"Website\", \"Facebook\", \"Instagram\", \"Twitter\", \"LinkedIn\", \"Remarque\", \"user\", \"created_date\"}\n\t\t\t# data_dict[\"Nom\"] = fields[0]\n\t\t\t# data_dict[\"Post_Nom\"] = fields[1]\n\t\t\t# data_dict[\"Prenom\"] = fields[2]\n\t\t\t# data_dict[\"Numero\"] = fields[3]\n\t\t\ttry:\n\t\t\t\tform = Contact(data_dict)\n\t\t\t\tif form.is_valid():\n\t\t\t\t\tform.save()\t",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tform",
        "kind": 5,
        "importPath": "contacts.views",
        "description": "contacts.views",
        "peekOfCode": "\t\t\t\tform = Contact(data_dict)\n\t\t\t\tif form.is_valid():\n\t\t\t\t\tform.save()\t\n\t\t\t\t\treturn HttpResponseRedirect(reverse(\"contacts:contact_view\"))\t\t\t\t\n\t\t\t\telse:\n\t\t\t\t\tlogging.getLogger(\"error_logger\").error(form.errors.as_json())\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\texcept Exception as e:\n\t\t\t\tlogging.getLogger(\"error_logger\").error(repr(e))\t\t\t\t\t\n\t\t\t\tpass\n\texcept Exception as e:",
        "detail": "contacts.views",
        "documentation": {}
    },
    {
        "label": "DashboardConfig",
        "kind": 6,
        "importPath": "dashboard.apps",
        "description": "dashboard.apps",
        "peekOfCode": "class DashboardConfig(AppConfig):\n    name = 'dashboard'",
        "detail": "dashboard.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "dashboard.urls",
        "description": "dashboard.urls",
        "peekOfCode": "urlpatterns = [\n    path('', dashboard_view, name='dashboard'),\n    path('dashboard_admin_view/', dashboard_admin_view, name='dashboard_admin_view'),\n]",
        "detail": "dashboard.urls",
        "documentation": {}
    },
    {
        "label": "dashboard_view",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def dashboard_view(request):\n    # online\n    users_online = Profile.objects.filter(is_online=True).count()\n    user_list = User.objects.all()\n    user = request.user\n    # report CDR \n    cdr_answered = Cdr.objects.filter(src=user).filter(lastapp='Dial').count()\n    cdr_no_answer = Cdr.objects.filter(src=user).filter(lastapp='HangUp').count()\n    cdr_answered_cout = Cdr.objects.all()\n    cdr_no_answer_cout = Cdr.objects.filter(src=user).filter(lastapp='HangUp')",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "dashboard_admin_view",
        "kind": 2,
        "importPath": "dashboard.views",
        "description": "dashboard.views",
        "peekOfCode": "def dashboard_admin_view(request):\n    user = request.user\n    users_online = Profile.objects.filter(is_online=True).count()\n    user_list = User.objects.all().count()\n    # report CDR \n    cdr_answered = Cdr.objects.all().filter(lastapp='Dial').count()\n    cdr_no_answer = Cdr.objects.all().filter(lastapp='HangUp').count()\n    cdr_total = Cdr.objects.all().count()\n    cdr_list = Cdr.objects.all().order_by('-calldate')[:5]\n    cdr_duration = Cdr.objects.all().order_by('-calldate')[:1]",
        "detail": "dashboard.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0001_initial",
        "description": "dat.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Dat',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "dat.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0002_auto_20210502_0911",
        "description": "dat.migrations.0002_auto_20210502_0911",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='dat',\n            name='Bound',\n            field=models.CharField(choices=[('OUTBOUND', 'OUTBOUND'), ('INBOUND', 'INBOUND')], max_length=20, null=True),\n        ),",
        "detail": "dat.migrations.0002_auto_20210502_0911",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0003_auto_20210502_1400",
        "description": "dat.migrations.0003_auto_20210502_1400",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0002_auto_20210502_0911'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='dat',\n            name='Bound',\n            field=models.CharField(max_length=20, null=True),\n        ),",
        "detail": "dat.migrations.0003_auto_20210502_1400",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0004_auto_20210502_1845",
        "description": "dat.migrations.0004_auto_20210502_1845",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0003_auto_20210502_1400'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='dat',\n            name='Statut',\n            field=models.CharField(choices=[('Statuts de reporting', 'Statuts de reporting'), ('Accord', 'Accord'), ('Déjà payé son crédit', 'Déjà payé son crédit'), ('Refus', 'Refus'), ('Rappel', 'Rappel (interlocuteur demande de rappeler)'), ('Injoignable', 'Injoignable'), ('Absent', 'Absent'), ('Faux numéro', 'Faux numéro'), ('Réfléchir', 'Réfléchir')], max_length=30, null=True),\n        ),",
        "detail": "dat.migrations.0004_auto_20210502_1845",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0005_auto_20210503_0413",
        "description": "dat.migrations.0005_auto_20210503_0413",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0004_auto_20210502_1845'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='dat',\n            name='Email',\n            field=models.EmailField(blank=True, default='contact@advans.com', max_length=254, null=True),\n        ),",
        "detail": "dat.migrations.0005_auto_20210503_0413",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0006_auto_20210503_1031",
        "description": "dat.migrations.0006_auto_20210503_1031",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0005_auto_20210503_0413'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='dat',\n            name='questions1',\n            field=models.CharField(max_length=200, null=True),\n        ),",
        "detail": "dat.migrations.0006_auto_20210503_1031",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0007_auto_20210503_1036",
        "description": "dat.migrations.0007_auto_20210503_1036",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0006_auto_20210503_1031'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='dat',\n            name='questions1',\n            field=models.BooleanField(max_length=200, null=True),\n        ),",
        "detail": "dat.migrations.0007_auto_20210503_1036",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0008_auto_20210503_1039",
        "description": "dat.migrations.0008_auto_20210503_1039",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0007_auto_20210503_1036'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='dat',\n            name='questions1',\n            field=models.CharField(default='NON', max_length=200, null=True),\n        ),",
        "detail": "dat.migrations.0008_auto_20210503_1039",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0009_auto_20210503_1112",
        "description": "dat.migrations.0009_auto_20210503_1112",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0008_auto_20210503_1039'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='dat',\n            name='Province',\n            field=models.CharField(blank=True, choices=[('--------', '--------'), ('Bas-Uele', 'Bas-Uele'), ('Équateur', 'Équateur'), ('Haut-Katanga', 'Haut-Katanga'), ('Haut-Lomami', 'Haut-Lomami'), ('Haut-Uele', 'Haut-Uele'), ('Ituri', 'Ituri'), ('Kasaï', 'Kasaï'), ('Kasaï-Central', 'Kasaï-Central'), ('Kasaï oriental', 'Kasaï oriental'), ('Kinshasa', 'Kinshasa'), ('Kongo central1', 'Kongo central1'), ('Kwango', 'Kwango'), ('Kwilu', 'Kwilu'), ('Lomami', 'Lomami'), ('Lualaba', 'Lualaba'), ('Mai-Ndombe', 'Mai-Ndombe'), ('Maniema', 'Maniema'), ('Mongala', 'Mongala'), ('Nord-Kivu', 'Nord-Kivu'), ('Nord-Ubangi', 'Nord-Ubangi'), ('Sankuru', 'Sankuru'), ('Sud-Kivu', 'Sud-Kivu'), ('Sud-Ubangi', 'Sud-Ubangi'), ('Tanganyika', 'Tanganyika'), ('Tshopo', 'Tshopo'), ('Tshuapa', 'Tshuapa')], default='Kinshasa', max_length=20, null=True),\n        ),",
        "detail": "dat.migrations.0009_auto_20210503_1112",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0010_dat_remarque",
        "description": "dat.migrations.0010_dat_remarque",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0009_auto_20210503_1112'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='dat',\n            name='Remarque',\n            field=models.CharField(blank=True, max_length=200, null=True),\n        ),",
        "detail": "dat.migrations.0010_dat_remarque",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0011_auto_20210504_0711",
        "description": "dat.migrations.0011_auto_20210504_0711",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0010_dat_remarque'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='dat',\n            name='Remarque',\n            field=models.CharField(blank=True, default='-', max_length=200, null=True),\n        ),",
        "detail": "dat.migrations.0011_auto_20210504_0711",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0012_auto_20210504_1103",
        "description": "dat.migrations.0012_auto_20210504_1103",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0011_auto_20210504_0711'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='dat',\n            old_name='questions1',\n            new_name='questons1',\n        ),",
        "detail": "dat.migrations.0012_auto_20210504_1103",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0013_auto_20210504_1130",
        "description": "dat.migrations.0013_auto_20210504_1130",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0012_auto_20210504_1103'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='dat',\n            old_name='questons1',\n            new_name='questions1',\n        ),",
        "detail": "dat.migrations.0013_auto_20210504_1130",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "dat.migrations.0014_auto_20210506_0940",
        "description": "dat.migrations.0014_auto_20210506_0940",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('dat', '0013_auto_20210504_1130'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='dat',\n            name='Rue',\n            field=models.CharField(blank=True, default='-', max_length=100, null=True),\n        ),",
        "detail": "dat.migrations.0014_auto_20210506_0940",
        "documentation": {}
    },
    {
        "label": "DatAdmin",
        "kind": 6,
        "importPath": "dat.admin",
        "description": "dat.admin",
        "peekOfCode": "class DatAdmin(admin.ModelAdmin):\n    list_display = (\n        'user', 'created_date', 'questions1', 'questions2', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Quartier', 'Commune', 'Province', \n        'Tel1', 'Email', 'Statut', 'Bound', 'Remarque'\n    )\n    list_filter = (\n        ('created_date', PastDateRangeFilter), \n        'user', 'Statut', 'Bound'\n    )\n    actions = [export_to_csv]",
        "detail": "dat.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "dat.admin",
        "description": "dat.admin",
        "peekOfCode": "def export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(\n                                          opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields(\n    ) if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information",
        "detail": "dat.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv.short_description",
        "kind": 5,
        "importPath": "dat.admin",
        "description": "dat.admin",
        "peekOfCode": "export_to_csv.short_description = 'Export to CSV'\nclass DatAdmin(admin.ModelAdmin):\n    list_display = (\n        'user', 'created_date', 'questions1', 'questions2', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Quartier', 'Commune', 'Province', \n        'Tel1', 'Email', 'Statut', 'Bound', 'Remarque'\n    )\n    list_filter = (\n        ('created_date', PastDateRangeFilter), \n        'user', 'Statut', 'Bound'\n    )",
        "detail": "dat.admin",
        "documentation": {}
    },
    {
        "label": "DatConfig",
        "kind": 6,
        "importPath": "dat.apps",
        "description": "dat.apps",
        "peekOfCode": "class DatConfig(AppConfig):\n    name = 'dat'",
        "detail": "dat.apps",
        "documentation": {}
    },
    {
        "label": "DatForm",
        "kind": 6,
        "importPath": "dat.forms",
        "description": "dat.forms",
        "peekOfCode": "class DatForm(forms.ModelForm):\n    class Meta:\n        model = Dat\n        fields = (\n            'questions1', 'questions2', 'Nom', 'Post_Nom', 'Prenom', \n            'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province',\n            'Tel1','Email', 'Statut', 'Bound', 'Remarque',\n        ) \n    questions1 = forms.CharField(\n        label='',",
        "detail": "dat.forms",
        "documentation": {}
    },
    {
        "label": "Dat",
        "kind": 6,
        "importPath": "dat.models",
        "description": "dat.models",
        "peekOfCode": "class Dat(models.Model):\n    user             = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date     = models.DateTimeField(auto_now_add=True)\n    questions1       = models.CharField(max_length=200, null=True, default='-')\n    questions2       = models.CharField(max_length=200, null=True, default='-')\n    Nom              = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Post_Nom         = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Prenom           = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Numero           = models.CharField(max_length=20, null=True, blank=True, default='-', verbose_name='N°')\n    Rue              = models.CharField(max_length=100, null=True, blank=True, default='-')",
        "detail": "dat.models",
        "documentation": {}
    },
    {
        "label": "BOUND",
        "kind": 5,
        "importPath": "dat.models",
        "description": "dat.models",
        "peekOfCode": "BOUND = (\n    ('OUTBOUND', 'OUTBOUND'),\n    ('INBOUND', 'INBOUND'),\n)\nclass Dat(models.Model):\n    user             = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date     = models.DateTimeField(auto_now_add=True)\n    questions1       = models.CharField(max_length=200, null=True, default='-')\n    questions2       = models.CharField(max_length=200, null=True, default='-')\n    Nom              = models.CharField(max_length=100, null=True, blank=True, default='-')",
        "detail": "dat.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "dat.urls",
        "description": "dat.urls",
        "peekOfCode": "urlpatterns = [\n    path('dat-add/', dat_add, name='dat_add'),\n    path('dat-list/', dat_list, name='dat_list'),\n    path('dat-update/<int:id>/', dat_update, name='dat_update'),\n    path('dat-view/<int:id>/', dat_view, name='dat_view'),\n    path('dat-destroy/<int:id>/', dat_destroy, name='dat_destroy'),\n    path('export/xls/', export_dat_xls, name='export_dat_xls'),\n    path('export/csv/', export_dat_csv, name='export_dat_csv'),\n]",
        "detail": "dat.urls",
        "documentation": {}
    },
    {
        "label": "dat_add",
        "kind": 2,
        "importPath": "dat.views",
        "description": "dat.views",
        "peekOfCode": "def dat_add(request):\n    \"\"\"\n        Fonction Add new object\n    \"\"\"\n    if request.method == 'POST':\n        # create a form instance and populate it with data from the request:\n        form = DatForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required",
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "dat_list",
        "kind": 2,
        "importPath": "dat.views",
        "description": "dat.views",
        "peekOfCode": "def dat_list(request): \n    \"\"\"\n        Fonction List objects\n    \"\"\" \n    user = request.user\n    dat_count = Dat.objects.filter(user=user).order_by('-created_date').count()\n    dat = Dat.objects.filter(user=user).order_by('-created_date')\n    paginator = Paginator(dat, 10)\n    page = request.GET.get('page')\n    try:",
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "dat_view",
        "kind": 2,
        "importPath": "dat.views",
        "description": "dat.views",
        "peekOfCode": "def dat_view(request, id):  \n    \"\"\"\n        Fonction Detail\n    \"\"\"\n    user = request.user\n    dat = Dat.objects.filter(user=user).get(id=id)\n    context = {\n        'dat': dat,\n    }  \n    template_name = 'pages/dat/dat_view.html'",
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "dat_update",
        "kind": 2,
        "importPath": "dat.views",
        "description": "dat.views",
        "peekOfCode": "def dat_update(request, id):\n    \"\"\"\n        Fonction de Mis à jour\n    \"\"\"\n    dat = Dat.objects.get(id=id)  \n    form = DatForm(request.POST, instance=dat)  \n    if form.is_valid():  \n        form.user = request.user\n        form.save()  \n        messages.success(request, \"DAT modifié!\")",
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "dat_destroy",
        "kind": 2,
        "importPath": "dat.views",
        "description": "dat.views",
        "peekOfCode": "def dat_destroy(request, id):\n    \"\"\"\n        Fonction de Suppresion\n    \"\"\"\n    user = request.user\n    dat = Dat.objects.filter(user=user).get(id=id)  \n    dat.delete()  \n    return redirect(\"dat:dat_list\")  \ndef export_dat_xls(request):\n    user = request.user",
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "export_dat_xls",
        "kind": 2,
        "importPath": "dat.views",
        "description": "dat.views",
        "peekOfCode": "def export_dat_xls(request):\n    user = request.user\n    response = HttpResponse(content_type='application/ms-excel')\n    response['Content-Disposition'] = 'attachment; filename=\"dat.xls\"'\n    wb = xlwt.Workbook(encoding='utf-8')\n    ws = wb.add_sheet('Dat')\n    # Sheet header, first row\n    row_num = 0\n    font_style = xlwt.XFStyle()\n    font_style.font.bold = True",
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "export_dat_csv",
        "kind": 2,
        "importPath": "dat.views",
        "description": "dat.views",
        "peekOfCode": "def export_dat_csv(request):\n    user = request.user\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"dat.csv\"'\n    writer = csv.writer(response)\n    writer.writerow(['created_date', 'questions1', 'questions2', 'Nom', 'Post_Nom', 'Prenom',\n                     'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province',\n                     'Tel1', 'Email', 'Statut', 'Bound', 'Remarque', 'Agent', ])\n    dat = Dat.objects.filter(user=user).values_list('created_date', 'questions1', 'questions2', 'Nom', 'Post_Nom', 'Prenom',\n                                                      'Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province',",
        "detail": "dat.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "forms.migrations.0001_initial",
        "description": "forms.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Acquisition',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "forms.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "forms.migrations.0002_delete_dat",
        "description": "forms.migrations.0002_delete_dat",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('forms', '0001_initial'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Dat',\n        ),\n    ]",
        "detail": "forms.migrations.0002_delete_dat",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "forms.migrations.0003_auto_20210503_1112",
        "description": "forms.migrations.0003_auto_20210503_1112",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('forms', '0002_delete_dat'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='contact',\n            name='Pays',\n            field=models.CharField(blank=True, choices=[('--------', '--------'), ('Afrique du Sud', 'Afrique du Sud'), ('Afghanistan', 'Afghanistan'), ('Albanie', 'Albanie'), ('Algérie', 'Algérie'), ('Allemagne', 'Allemagne'), ('Andorre', 'Andorre'), ('Angola', 'Angola'), ('Antigua-et-Barbuda', 'Antigua-et-Barbuda'), ('Arabie Saoudite', 'Arabie Saoudite'), ('Argentine', 'Argentine'), ('Arménie', 'Arménie'), ('Australie', 'Australie'), ('Autriche', 'Autriche'), ('Azerbaïdjan', 'Azerbaïdjan'), ('Bahamas', 'Bahamas'), ('Bahreïn', 'Bahreïn'), ('Bangladesh', 'Bangladesh'), ('Barbade', 'Barbade'), ('Belgique', 'Belgique'), ('Belize', 'Belize'), ('Bénin', 'Bénin'), ('Bhoutan', 'Bhoutan'), ('Biélorussie', 'Biélorussie'), ('Birmanie', 'Birmanie'), ('Bolivie', 'Bolivie'), ('Bosnie-Herzégovine', 'Bosnie-Herzégovine'), ('Botswana', 'Botswana'), ('Brésil', 'Brésil'), ('Brunei', 'Brunei'), ('Bulgarie', 'Bulgarie'), ('Burkina ,', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodge', 'Cambodge'), ('Cameroun', 'Cameroun'), ('Canada', 'Canada'), ('Cap-Vert', 'Cap-Vert'), ('Chili', 'Chili'), ('Chine', 'Chine'), ('Chypre', 'Chypre'), ('Colombie', 'Colombie'), ('Comores', 'Comores'), ('Corée du Nord', 'Corée du Nord'), ('Corée du Sud', 'Corée du Sud'), ('Costa Rica', 'Costa Rica'), ('Côte d’Ivoire', 'Côte d’Ivoire'), ('Croatie', 'Croatie'), ('Cuba', 'Cuba'), ('Danemark', 'Danemark'), ('Djibouti', 'Djibouti'), ('Dominique', 'Dominique'), ('Égypte', 'Égypte'), ('Émirats arabes unis', 'Émirats arabes unis'), ('Équateur', 'Équateur'), ('Érythrée', 'Érythrée'), ('Espagne', 'Espagne'), ('Eswatini', 'Eswatini'), ('Estonie', 'Estonie'), ('États-Unis', 'États-Unis'), ('Éthiopie', 'Éthiopie'), ('Fidji', 'Fidji'), ('Finlande', 'Finlande'), ('France', 'France'), ('Gabon', 'Gabon'), ('Gambie', 'Gambie'), ('Géorgie', 'Géorgie'), ('Ghana', 'Ghana'), ('Grèce', 'Grèce'), ('Grenade', 'Grenade'), ('Guatemala', 'Guatemala'), ('Guinée', 'Guinée'), ('Guinée équatoriale', 'Guinée équatoriale'), ('Guinée-Bissau', 'Guinée-Bissau'), ('Guyana', 'Guyana'), ('Haïti', 'Haïti'), ('Honduras', 'Honduras'), ('Hongrie', 'Hongrie'), ('Îles Cook', 'Îles Cook'), ('Îles Marshall', 'Îles Marshall'), ('Inde', 'Inde'), ('Indonésie', 'Indonésie'), ('Irak', 'Irak'), ('Iran', 'Iran'), ('Irlande', 'Irlande'), ('Islande', 'Islande'), ('Israël', 'Israël'), ('Italie', 'Italie'), ('Jamaïque', 'Jamaïque'), ('Japon', 'Japon'), ('Jordanie', 'Jordanie'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kirghizistan', 'Kirghizistan'), ('Kiribati', 'Kiribati'), ('Koweït', 'Koweït'), ('Laos', 'Laos'), ('Lesotho', 'Lesotho'), ('Lettonie', 'Lettonie'), ('Liban', 'Liban'), ('Liberia', 'Liberia'), ('Libye', 'Libye'), ('Liechtenstein', 'Liechtenstein'), ('Lituanie', 'Lituanie'), ('Luxembourg', 'Luxembourg'), ('Macédoine', 'Macédoine'), ('Madagascar', 'Madagascar'), ('Malaisie', 'Malaisie'), ('Malawi', 'Malawi'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malte', 'Malte'), ('Maroc', 'Maroc'), ('Maurice', 'Maurice'), ('Mauritanie', 'Mauritanie'), ('Mexique', 'Mexique'), ('Micronésie', 'Micronésie'), ('Moldavie', 'Moldavie'), ('Monaco', 'Monaco'), ('Mongolie', 'Mongolie'), ('Monténégro', 'Monténégro'), ('Mozambique', 'Mozambique'), ('Namibie', 'Namibie'), ('Nauru', 'Nauru'), ('Népal', 'Népal'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norvège', 'Norvège'), ('Nouvelle-Zélande', 'Nouvelle-Zélande'), ('Oman', 'Oman'), ('Ouganda', 'Ouganda'), ('Ouzbékistan', 'Ouzbékistan'), ('Pakistan', 'Pakistan'), ('Palaos', 'Palaos'), ('Palestine', 'Palestine'), ('Panama', 'Panama'), ('Papouasie-Nouvelle-Guinée', 'Papouasie-Nouvelle-Guinée'), ('Paraguay', 'Paraguay'), ('Pays-Bas', 'Pays-Bas'), ('Pérou', 'Pérou'), ('Philippines', 'Philippines'), ('Pologne', 'Pologne'), ('Portugal', 'Portugal'), ('Qatar', 'Qatar'), ('République centrafricaine', 'République centrafricaine'), ('République démocratique du Congo', 'République démocratique du Congo'), ('République Dominicaine', 'République Dominicaine'), ('République du Congo', 'République du Congo'), ('République tchèque', 'République tchèque'), ('Roumanie', 'Roumanie'), ('Royaume-Uni', 'Royaume-Uni'), ('Russie', 'Russie'), ('Rwanda', 'Rwanda'), ('Saint-Kitts-et-Nevis', 'Saint-Kitts-et-Nevis'), ('Saint-Vincent-et-les-Grenadines', 'Saint-Vincent-et-les-Grenadines'), ('Sainte-Lucie', 'Sainte-Lucie'), ('Saint-Marin', 'Saint-Marin'), ('Salomon', 'Salomon'), ('Salvador', 'Salvador'), ('Samoa', 'Samoa'), ('São Tomé-et-Principe', 'São Tomé-et-Principe'), ('Sénégal', 'Sénégal'), ('Serbie', 'Serbie'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapour', 'Singapour'), ('Slovaquie', 'Slovaquie'), ('Slovénie', 'Slovénie'), ('Somalie', 'Somalie'), ('Soudan', 'Soudan'), ('Soudan du Sud', 'Soudan du Sud'), ('Sri Lanka', 'Sri Lanka'), ('Suède', 'Suède'), ('Suisse', 'Suisse'), ('Suriname', 'Suriname'), ('Syrie', 'Syrie'), ('Tadjikistan', 'Tadjikistan'), ('Tanzanie', 'Tanzanie'), ('Tchad', 'Tchad'), ('Thaïlande', 'Thaïlande'), ('Timor oriental', 'Timor oriental'), ('Togo', 'Togo'), ('Tonga', 'Tonga'), ('Trinité-et-Tobago', 'Trinité-et-Tobago'), ('Tunisie', 'Tunisie'), ('Turkménistan', 'Turkménistan'), ('Turquie', 'Turquie'), ('Tuvalu', 'Tuvalu'), ('Ukraine', 'Ukraine'), ('Uruguay', 'Uruguay'), ('Vanuatu', 'Vanuatu'), ('Vatican', 'Vatican'), ('Venezuela', 'Venezuela'), ('Viêt Nam', 'Viêt Nam'), ('Yémen', 'Yémen'), ('Zambie', 'Zambie'), ('Zimbabwe', 'Zimbabwe')], default='-', max_length=100, null=True),\n        ),",
        "detail": "forms.migrations.0003_auto_20210503_1112",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "forms.migrations.0004_auto_20210504_1307",
        "description": "forms.migrations.0004_auto_20210504_1307",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('forms', '0003_auto_20210503_1112'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Acquisition',\n        ),\n        migrations.DeleteModel(\n            name='CommercialePromotion',",
        "detail": "forms.migrations.0004_auto_20210504_1307",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "forms.migrations.0005_auto_20210506_1310",
        "description": "forms.migrations.0005_auto_20210506_1310",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('forms', '0004_auto_20210504_1307'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='contact',\n            name='Pays',\n        ),\n        migrations.AddField(",
        "detail": "forms.migrations.0005_auto_20210506_1310",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "forms.migrations.0006_delete_contact",
        "description": "forms.migrations.0006_delete_contact",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('forms', '0005_auto_20210506_1310'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='Contact',\n        ),\n    ]",
        "detail": "forms.migrations.0006_delete_contact",
        "documentation": {}
    },
    {
        "label": "scriptAdmin",
        "kind": 6,
        "importPath": "forms.admin",
        "description": "forms.admin",
        "peekOfCode": "class scriptAdmin(admin.ModelAdmin):\n    list_display = (\n        'id', 'questions1', 'questions2', 'questions3', 'questions4', 'questions5', 'questions6', 'questions7', 'questions8', 'questions9',\n        'questions10', 'questions12', 'questions13', 'questions15', 'questions16', 'Q19temps_a_contacter',\n        'montant_de_pret', 'duree_de_credit', 'montant_a_rembourser_chaque_mois', 'montant_des_ventes_bonne_journee',\n        'montant_des_ventes_mauvaise_journee', 'date_a_laquelle_recevoir_credit', 'Nom_du_garant', 'Activite',\n        'Remarque', 'Commentaire', 'Concurrent', 'CommentaireQ17',\n        'Nom_societe', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Quartier', 'Commune', 'Province',\n        'Pays', 'Tel1', 'Tel2', 'Email', 'Website', 'Facebook', 'Instagram', 'Twitter', 'LinkedIn', 'Statut',\n    )",
        "detail": "forms.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "forms.admin",
        "description": "forms.admin",
        "peekOfCode": "def export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields() if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information\n    writer.writerow([field.verbose_name for field in fields])\n    # Write data rows",
        "detail": "forms.admin",
        "documentation": {}
    },
    {
        "label": "FormsConfig",
        "kind": 6,
        "importPath": "forms.apps",
        "description": "forms.apps",
        "peekOfCode": "class FormsConfig(AppConfig):\n    name = 'forms'",
        "detail": "forms.apps",
        "documentation": {}
    },
    {
        "label": "KycForm",
        "kind": 6,
        "importPath": "forms.forms",
        "description": "forms.forms",
        "peekOfCode": "class KycForm(forms.ModelForm):\n    class Meta:\n        model = Kyc\n        fields = (\n            'questions1', 'questions2', 'questions3', 'questions4', 'questions5', 'questions6', 'questions7', 'questions8', 'questions9',\n            'questions10', 'questions12', 'questions13', 'questions15', 'questions16', 'Q19temps_a_contacter',\n            'montant_de_pret', 'duree_de_credit', 'montant_a_rembourser_chaque_mois', 'montant_des_ventes_bonne_journee', \n            'montant_des_ventes_mauvaise_journee', 'date_a_laquelle_recevoir_credit', 'Nom_du_garant', 'Activite', \n            'Remarque', 'Commentaire', 'Concurrent', 'CommentaireQ17',\n            'Nom_societe','Nom','Post_Nom','Prenom','Numero','Quartier','Commune','Province',",
        "detail": "forms.forms",
        "documentation": {}
    },
    {
        "label": "Kyc",
        "kind": 6,
        "importPath": "forms.models",
        "description": "forms.models",
        "peekOfCode": "class Kyc(models.Model):\n    user            = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date    = models.DateTimeField(auto_now_add=True)\n    questions1       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions2       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions3       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions4       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions5       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions6       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions7       = models.CharField(max_length=200, null=True, blank=True, default='-')",
        "detail": "forms.models",
        "documentation": {}
    },
    {
        "label": "PAYS",
        "kind": 5,
        "importPath": "forms.pays",
        "description": "forms.pays",
        "peekOfCode": "PAYS = (\n    ('--------', '--------'),\n    ('Afrique du Sud','Afrique du Sud'),\n    ('Afghanistan','Afghanistan'),\n    ('Albanie','Albanie'),\n    ('Algérie','Algérie'),\n    ('Allemagne','Allemagne'),\n    ('Andorre','Andorre'),\n    ('Angola','Angola'),\n    ('Antigua-et-Barbuda','Antigua-et-Barbuda'),",
        "detail": "forms.pays",
        "documentation": {}
    },
    {
        "label": "PROVINCES",
        "kind": 5,
        "importPath": "forms.province",
        "description": "forms.province",
        "peekOfCode": "PROVINCES = (\n    ('--------', '--------'),\n    ('Bas-Uele', 'Bas-Uele'),\n    ('Équateur', 'Équateur'),\n    ('Haut-Katanga', 'Haut-Katanga'),\n    (\"Haut-Lomami\", \"Haut-Lomami\"),\t\n    ('Haut-Uele', 'Haut-Uele'),\n    ('Ituri', 'Ituri'),\n    ('Kasaï', 'Kasaï'),\n    ('Kasaï-Central', 'Kasaï-Central'),",
        "detail": "forms.province",
        "documentation": {}
    },
    {
        "label": "STATUTS",
        "kind": 5,
        "importPath": "forms.statut",
        "description": "forms.statut",
        "peekOfCode": "STATUTS = (\n    ('Statuts de reporting', 'Statuts de reporting'),\n    ('Accord', 'Accord'),\n    ('Déjà payé son crédit', 'Déjà payé son crédit'),\n    ('Refus', 'Refus'),\n    ('Rappel', 'Rappel (interlocuteur demande de rappeler)'),\n    ('Injoignable', 'Injoignable'),\n    ('Absent', 'Absent'),\n    ('Faux numéro', 'Faux numéro'),\n    ('Réfléchir', 'Réfléchir'),",
        "detail": "forms.statut",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "forms.urls",
        "description": "forms.urls",
        "peekOfCode": "urlpatterns = [\n    path('', scripting_forms, name='scripting_forms'),\n    path('scripting_list/', scripting_list, name='scripting_list'),\n    path('scripting_forms_edit/<int:id>/', scripting_forms_edit, name='scripting_forms_edit'),\n    path('enquetes_view/', enquetes_view, name='enquetes_view'),\n]",
        "detail": "forms.urls",
        "documentation": {}
    },
    {
        "label": "scripting_forms",
        "kind": 2,
        "importPath": "forms.views",
        "description": "forms.views",
        "peekOfCode": "def scripting_forms(request):\n    form = KycForm(request.POST)\n    if request.method == 'POST':\n        if form.is_valid():\n            scripting = form.save(commit=False)\n            scripting.user = request.user\n            scripting.save()\n            messages.success(request, \"Scripting enregistrées!\")\n            # redirect to a new URL:\n            return HttpResponseRedirect(reverse('forms:scripting_list'))",
        "detail": "forms.views",
        "documentation": {}
    },
    {
        "label": "scripting_forms_edit",
        "kind": 2,
        "importPath": "forms.views",
        "description": "forms.views",
        "peekOfCode": "def scripting_forms_edit(request, id):\n    scripting = Kyc.objects.get(id=id)\n    form = KycForm(request.POST)\n    if request.method == 'POST':\n        if form.is_valid():\n            scripting = form.save(commit=False)\n            scripting.user = request.user\n            scripting.save()\n            messages.success(request, \"Scripting modifié!\")\n            # redirect to a new URL:",
        "detail": "forms.views",
        "documentation": {}
    },
    {
        "label": "scripting_list",
        "kind": 2,
        "importPath": "forms.views",
        "description": "forms.views",
        "peekOfCode": "def scripting_list(request):\n    user = request.user\n    kyc = Kyc.objects.filter(user=user).order_by('-created_date')\n    paginator = Paginator(kyc, 10)\n    page = request.GET.get('page')\n    try:\n        kyc_list = paginator.page(page)\n    except PageNotAnInteger:\n        kyc_list = paginator.page(1)\n    except EmptyPage:",
        "detail": "forms.views",
        "documentation": {}
    },
    {
        "label": "enquetes_view",
        "kind": 2,
        "importPath": "forms.views",
        "description": "forms.views",
        "peekOfCode": "def enquetes_view(request):\n    context = {}\n    template_name = 'pages/forms/enquetes_view.html'\n    return render(request, template_name, context)\n# class Dat()",
        "detail": "forms.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "pbx.migrations.0001_initial",
        "description": "pbx.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AsteriskPublication',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('devicestate_publish', models.CharField(blank=True, max_length=40, null=True)),",
        "detail": "pbx.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "pbx.migrations.0002_auto_20210508_1156",
        "description": "pbx.migrations.0002_auto_20210508_1156",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('pbx', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='cdr',\n            name='amaflags',\n            field=models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], db_index=True, default=0),\n        ),",
        "detail": "pbx.migrations.0002_auto_20210508_1156",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "pbx.migrations.0003_auto_20210508_1159",
        "description": "pbx.migrations.0003_auto_20210508_1159",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('pbx', '0002_auto_20210508_1156'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='sip_conf',\n            name='amaflags',\n            field=models.CharField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], default='billing', help_text='indicateurs spéciaux pour contrôler le calcul par défaut', max_length=20, null=True),\n        ),",
        "detail": "pbx.migrations.0003_auto_20210508_1159",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "pbx.migrations.0004_auto_20210512_1340",
        "description": "pbx.migrations.0004_auto_20210512_1340",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('pbx', '0003_auto_20210508_1159'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='endpoints',\n            name='id',\n            field=models.BigIntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID'),\n        ),",
        "detail": "pbx.migrations.0004_auto_20210512_1340",
        "documentation": {}
    },
    {
        "label": "ContextsAdmin",
        "kind": 6,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "class ContextsAdmin(admin.ModelAdmin):\n    list_display = ('name', 'full_name', 'incoming',)\nclass CdrAdmin(admin.ModelAdmin):\n    def billsec_norm(obj):\n        return timedelta(seconds=obj.billsec)\n    billsec_norm.short_description = u'Min.'\n    def linksrc(self):\n        return u\"\"\"<a style='font-size: 12px' href='/admin/pbx/cdr/?accountcode=%s'><b>%s</b></a> <a href='?src=%s'><img style='float: right' src='/media/img/filter.png'></a>\"\"\" % (self.accountcode, self.src, self.src)\n    linksrc.allow_tags = True\n    linksrc.short_description = u'Numéro sortant | Filtre'",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "CdrAdmin",
        "kind": 6,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "class CdrAdmin(admin.ModelAdmin):\n    def billsec_norm(obj):\n        return timedelta(seconds=obj.billsec)\n    billsec_norm.short_description = u'Min.'\n    def linksrc(self):\n        return u\"\"\"<a style='font-size: 12px' href='/admin/pbx/cdr/?accountcode=%s'><b>%s</b></a> <a href='?src=%s'><img style='float: right' src='/media/img/filter.png'></a>\"\"\" % (self.accountcode, self.src, self.src)\n    linksrc.allow_tags = True\n    linksrc.short_description = u'Numéro sortant | Filtre'\n    def linkdst(self):\n        return u\"\"\"%s<a href='?dst=%s'><img style='float: right' src='/media/img/filter.png'></a>\"\"\" % (self.dst, self.dst)",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "CelAdmin",
        "kind": 6,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "class CelAdmin(admin.ModelAdmin):\n    list_display = ('uniqueid', 'eventtime', 'amaflags',\n                    'context', 'accountcode', 'cid_name', 'exten')\n    search_fields = ('uniqueid', 'exten')\n    list_display_links = ('uniqueid',)\n    list_filter = (('eventtime', PastDateRangeFilter), 'cid_num', 'exten', )\n    ordering = ['-eventtime', ]\n    read_only_list = ('uniqueid', 'eventtime', 'amaflags',\n                      'context', 'accountcode', 'cid_name', 'exten')\n    actions = [export_to_csv]",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "ExtensionsAdmin",
        "kind": 6,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "class ExtensionsAdmin(admin.ModelAdmin):\n    list_display = ('id', 'context', 'exten', 'priority', 'app', 'appdata', )\n    ordering = ['context__name', 'exten', 'priority', ]\n    search_fields = ('=app', 'appdata')\n    list_filter = ('context', 'exten')\n    # list_editable = ('context', 'exten','priority', 'app', 'appdata', )\n    list_display_links = ('id',)\nclass Sip_confAdmin(admin.ModelAdmin):\n    list_display = ('name', 'secret', 'callerid', 'context', 'host', 'ipaddr')\n    list_filter = ('context', 'amaflags', 'dtmfmode')",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "Sip_confAdmin",
        "kind": 6,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "class Sip_confAdmin(admin.ModelAdmin):\n    list_display = ('name', 'secret', 'callerid', 'context', 'host', 'ipaddr')\n    list_filter = ('context', 'amaflags', 'dtmfmode')\n    search_fields = ('name',)\n    ordering = ['name',]\n    radio_fields = {\"dtmfmode\": admin.VERTICAL, \"insecure\": admin.VERTICAL, \"type\": admin.VERTICAL, \"amaflags\": admin.VERTICAL,  }\n    def get_readonly_fields(self, request, obj=None):\n        fields = super(Sip_confAdmin, self).get_readonly_fields(request, obj)\n        if not request.user.is_superuser:\n            return ('host','nat','type','amaflags','callgroup','callerid',",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "EndpointsAdmin",
        "kind": 6,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "class EndpointsAdmin(admin.ModelAdmin):\n    list_display = ('id', 'context', 'aors', 'auth', 'mailboxes', 'transport', )\n    ordering = ['id', 'context', 'aors', 'auth', 'mailboxes', 'transport',]\n    search_fields = ('=id', 'context')\n    list_filter = ('context', 'id')\n    list_editable = ('context', 'aors', 'auth', 'mailboxes', 'transport',)\n    list_display_links = ('id',)\nclass VoicemailAdmin(admin.ModelAdmin):\n    list_display = ('mailbox', 'password', 'stamp')\n    search_fields = ('mailbox',)",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "VoicemailAdmin",
        "kind": 6,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "class VoicemailAdmin(admin.ModelAdmin):\n    list_display = ('mailbox', 'password', 'stamp')\n    search_fields = ('mailbox',)\n    ordering = ['mailbox', ]\n    list_display_links = ('mailbox',)\n    # def save_model(self, request, obj, form, change, *args, **kwargs):\n    #     if isinstance(obj.password, type(None)):\n    #         obj.password = ''\n    #     if len(obj.password) == 0:\n    #         obj.gen_passwd()",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "QueueAdmin",
        "kind": 6,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "class QueueAdmin(admin.ModelAdmin):\n    list_display = ('id', 'context', 'musiconhold', 'name',)\nadmin.site.register(Ps_aors)\nadmin.site.register(Ps_auths)\nadmin.site.register(Endpoints, EndpointsAdmin)\nadmin.site.register(Contexts, ContextsAdmin)\nadmin.site.register(Extensions, ExtensionsAdmin)\nadmin.site.register(Cdr, CdrAdmin)\nadmin.site.register(Cel, CelAdmin)\nadmin.site.register(IvrDetails)",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "cdr_detail",
        "kind": 2,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "def cdr_detail(obj):\n    return mark_safe('<a href=\"{}\">View</a>'.format(\n        reverse('pbx:cdr_detail', args=[obj.uniqueid])))\ndef cdr_pdf(obj):\n    return mark_safe('<a href=\"{}\">PDF</a>'.format(\n        reverse('pbx:cdr_detail', args=[obj.uniqueid])))\ncdr_pdf.allow_tags = True\ncdr_pdf.short_description = 'PDF bill'\ndef export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "cdr_pdf",
        "kind": 2,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "def cdr_pdf(obj):\n    return mark_safe('<a href=\"{}\">PDF</a>'.format(\n        reverse('pbx:cdr_detail', args=[obj.uniqueid])))\ncdr_pdf.allow_tags = True\ncdr_pdf.short_description = 'PDF bill'\ndef export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(opts.verbose_name)",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "def export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields() if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information\n    writer.writerow([field.verbose_name for field in fields])\n    # Write data rows",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "cdr_pdf.allow_tags",
        "kind": 5,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "cdr_pdf.allow_tags = True\ncdr_pdf.short_description = 'PDF bill'\ndef export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields() if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "cdr_pdf.short_description",
        "kind": 5,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "cdr_pdf.short_description = 'PDF bill'\ndef export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields() if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information\n    writer.writerow([field.verbose_name for field in fields])",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv.short_description",
        "kind": 5,
        "importPath": "pbx.admin",
        "description": "pbx.admin",
        "peekOfCode": "export_to_csv.short_description = 'Export to CSV'\nclass ContextsAdmin(admin.ModelAdmin):\n    list_display = ('name', 'full_name', 'incoming',)\nclass CdrAdmin(admin.ModelAdmin):\n    def billsec_norm(obj):\n        return timedelta(seconds=obj.billsec)\n    billsec_norm.short_description = u'Min.'\n    def linksrc(self):\n        return u\"\"\"<a style='font-size: 12px' href='/admin/pbx/cdr/?accountcode=%s'><b>%s</b></a> <a href='?src=%s'><img style='float: right' src='/media/img/filter.png'></a>\"\"\" % (self.accountcode, self.src, self.src)\n    linksrc.allow_tags = True",
        "detail": "pbx.admin",
        "documentation": {}
    },
    {
        "label": "PbxConfig",
        "kind": 6,
        "importPath": "pbx.apps",
        "description": "pbx.apps",
        "peekOfCode": "class PbxConfig(AppConfig):\n    name = 'pbx'",
        "detail": "pbx.apps",
        "documentation": {}
    },
    {
        "label": "APPS",
        "kind": 5,
        "importPath": "pbx.extensionsApps",
        "description": "pbx.extensionsApps",
        "peekOfCode": "APPS = (\n    (\"Dial\", u\"(Dial) Compose le numéro\"),\n    (\"HangUp\", u\"(HangUp) Posez le téléphone\"),\n    (\"Wait\", u\"(Wait) Attendez x secondes\"),\n    (\"Answer\", u\"(Answer) Décrocher le téléphone\"),\n    (\"AddQueueMember\", u\"AddQueueMember (file d'attente, canal) Supprimer du groupe\"),\n    (\"Queue\", u\"Queue (queue_name) Aller à la file d'attente\"),\n    (\"PlayBack\", u\"(PlayBack) Lire le fichier son\"),\n    (\"Set\", u\"(Set) Définir la variable\"),\n    (\"Read\", u\"(Read) Lisez le clav en changement.\"),",
        "detail": "pbx.extensionsApps",
        "documentation": {}
    },
    {
        "label": "MUSICONHOLD",
        "kind": 5,
        "importPath": "pbx.extensionsApps",
        "description": "pbx.extensionsApps",
        "peekOfCode": "MUSICONHOLD = (\n    ('ring 1', 'ring 1'),\n    ('ring 2', 'ring 2'),\n    ('ring 3', 'ring 3'),\n    ('ring 4', 'ring 4'),\n    ('ring 5', 'ring 5'),\n    ('ring 6', 'ring 6'),\n    ('ring 7', 'ring 7'),\n    ('ring 8', 'ring 8'),\n    ('ring 9', 'ring 9'),",
        "detail": "pbx.extensionsApps",
        "documentation": {}
    },
    {
        "label": "ReportFilterForm",
        "kind": 6,
        "importPath": "pbx.forms",
        "description": "pbx.forms",
        "peekOfCode": "class ReportFilterForm(forms.Form):\n    datetime_range = forms.CharField(\n        label='Choose Date and time Range:',\n        widget=forms.TextInput(attrs={\n            'class': 'form-control pull-right',\n            'name': 'datetimerange',\n            'id': 'datetimerange',\n            'width': '200px',\n            }\n        ),",
        "detail": "pbx.forms",
        "documentation": {}
    },
    {
        "label": "Contexts",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Contexts(models.Model):\n    \"\"\"\n        Context for extensions\n    \"\"\"\n    name = models.CharField(max_length=25, primary_key=True,  blank=False, null=False, verbose_name='le contexte', editable=True)\n    full_name = models.CharField(max_length=25, blank=False, null=False, verbose_name='la description', editable=True)\n    incoming = models.BooleanField(default=False, null=False, blank=False, verbose_name='Entrant', choices=IN_OUT, db_index=True)\n    def __str__(self):\n        return self.name\n    class Meta:",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Ps_aors",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Ps_aors(models.Model):\n    id                  = models.BigIntegerField(unique=True, primary_key=True, serialize=False, verbose_name='Unique ID', editable=True)\n    max_contacts        = models.PositiveIntegerField(u'max_contacts', choices=MAX_CONTACTS)\n    qualify_frequency   = models.PositiveIntegerField(u'Qualites de Frequence', choices=Q_FREQUENCE)\n    contact             = models.CharField(max_length=255, null=True, blank=True, db_column='contact')\n    default_expiration  = models.PositiveIntegerField(null=True, blank=True)\n    minimum_expiration  = models.PositiveIntegerField(null=True, blank=True)\n    remove_existing     = models.CharField(max_length=3, choices=YES_NO, null=True, blank=True)\n    authenticate_qualify = models.CharField(max_length=3, choices=YES_NO, null=True, blank=True)\n    maximum_expiration  = models.PositiveIntegerField(null=True, blank=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Ps_auths",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Ps_auths(models.Model):\n    '''\n        Module auth\n    '''\n    id             = models.BigIntegerField(unique=True, primary_key=True, serialize=False, verbose_name='Unique ID', editable=True)\n    auth_type      = models.CharField(max_length=200, null=True, blank=True, default='userpass')\n    nonce_lifetime = models.PositiveIntegerField(blank=True, null=True)\n    md5_cred       = models.CharField(max_length=40, blank=True, null=True)\n    password       = models.CharField(max_length=80)\n    realm          = models.CharField(max_length=40, blank=True, null=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Extensions",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Extensions(models.Model):\n    '''\n        Module de gestions d'appels\n    '''\n    context = models.ForeignKey(Contexts, on_delete=models.CASCADE, max_length=40, blank=True, null=True, db_column='context', db_index=True)\n    exten = models.CharField(max_length=40, blank=True, null=True, help_text='exten / template', db_index=True)\n    priority = models.IntegerField(null=True, blank=True, help_text='priorité')\n    app = models.CharField(max_length=40, choices=APPS, blank=True, null=True, help_text='application de plan de numérotation', db_index=True)\n    appdata = models.CharField(max_length=256, blank=True, null=True, help_text='paramètres d\\'application', db_index=True)\n    def __str__(self):",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Endpoints",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Endpoints(models.Model):\n    id = models.BigIntegerField(unique=True, primary_key=True, serialize=False, verbose_name='Unique ID', editable=True)\n    transport = models.CharField(u'transport', max_length=40, choices=TRANSPORT, null=True)\n    aors = models.PositiveIntegerField(unique=True, help_text='101', db_column='aors')\n    auth = models.PositiveIntegerField(unique=True, help_text='101', db_column='auth')\n    context = models.ForeignKey(Contexts, on_delete=models.CASCADE, max_length=200, db_column='context')\n    disallow = models.CharField(max_length=200, null=True, blank=True, default='all', choices=ALLOW)\n    allow = models.CharField(max_length=200, null=True, blank=True, default='all', choices=ALLOW)\n    direct_media = models.CharField(max_length=3, choices=YES_NO, null=True, blank=True)\n    deny = models.CharField(max_length=95, blank=True, null=True, default='0.0.0.0/0', verbose_name='sous-réseaux interdits')",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Cdr",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Cdr(models.Model):\n    calldate        = models.DateTimeField()\n    clid            = models.CharField(max_length=80, null=True, blank=True)\n    src             = models.CharField(max_length=80, null=True, blank=True)\n    dst             = models.CharField(max_length=80, null=True, blank=True)\n    dcontext        = models.CharField(max_length=80, null=True, blank=True)\n    channel         = models.CharField(max_length=80, null=True, blank=True)\n    dstchannel      = models.CharField(max_length=80, null=True, blank=True)\n    lastapp         = models.CharField(max_length=80, null=True, blank=True)\n    lastdata        = models.CharField(max_length=80, null=True, blank=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "IvrDetails",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class IvrDetails(models.Model):\n    name = models.CharField(max_length=50, blank=True, null=True)\n    description = models.CharField(max_length=150, blank=True, null=True)\n    announcement = models.IntegerField(blank=True, null=True)\n    directdial = models.CharField(max_length=50, blank=True, null=True)\n    invalid_loops = models.CharField(max_length=10, blank=True, null=True)\n    invalid_retry_recording = models.CharField(max_length=25, blank=True, null=True)\n    invalid_destination = models.CharField(max_length=50, blank=True, null=True)\n    timeout_enabled = models.CharField(max_length=50, blank=True, null=True)\n    invalid_recording = models.CharField(max_length=25, blank=True, null=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Cel",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Cel(models.Model):\n    \"\"\"\n       SQL CREATE TABLE cel\n    \"\"\"\n    eventtime = models.DateTimeField(auto_now_add=True, blank=True, null=True)\n    eventtype = models.CharField(max_length=80, default='', blank=True, null=True)\n    userdeftype = models.CharField(max_length=80, default='', blank=True, null=True)\n    cid_name = models.CharField(max_length=80, default='', blank=True, null=True)\n    cid_num = models.CharField(max_length=80, default='', blank=True, null=True)\n    cid_ani = models.CharField(max_length=80, default='', blank=True, null=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Contacts",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Contacts(models.Model):\n    uri = models.CharField(max_length=511, null=True, blank=True)\n    expiration_time = models.IntegerField(null=True, blank=True, verbose_name='expiration_time')\n    quality_frequency = models.IntegerField(null=True, blank=True, verbose_name='quality_frequency')\n    outbound_proxy = models.CharField(max_length=40, null=True, blank=True)\n    path = models.TextField(null=True, blank=True, verbose_name='path')\n    user_agent = models.CharField(max_length=255, null=True, blank=True)\n    quality_timeout = models.FloatField(null=True, blank=True, verbose_name='quality_timeout')\n    reg_server = models.CharField(max_length=255, null=True, blank=True)\n    authenticate_quality = models.CharField(max_length=3, choices=YES_NO, null=True, blank=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "AsteriskPublication",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class AsteriskPublication(models.Model):\n    devicestate_publish = models.CharField(max_length=40, null=True, blank=True)\n    mailboxstate_publish = models.CharField(max_length=40, null=True, blank=True)\n    device_state = models.CharField(max_length=128, choices=YES_NO, null=True, blank=True)\n    device_state_filter = models.CharField(max_length=256, null=True, blank=True)\n    mailbox_state = models.CharField(max_length=3, choices=YES_NO, null=True, blank=True)\n    mailbox_state_filter = models.CharField(max_length=256, null=True, blank=True)\n    def __str__(self):\n        return self.devicestate_publish\n    class Meta:",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Endpoints_id_ips",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Endpoints_id_ips(models.Model):\n    endpoint = models.CharField(max_length=40, null=True, blank=True)\n    match = models.CharField(max_length=80, null=True, blank=True)\n    srv_lookups = models.CharField(max_length=3, choices=YES_NO, null=True, blank=True)\n    match_header = models.CharField(max_length=255, null=True, blank=True)\n    def __str__(self):\n        return self.endpoint\n    class Meta:\n        verbose_name = u'Ps_endpoint_id_ips'\n        verbose_name_plural = u'Ps_endpoint_id_ips'",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Queue(models.Model):\n    id = models.IntegerField(unique=True, primary_key=True, serialize=False, verbose_name='Unique ID', editable=True)\n    name = models.CharField(max_length=128, null=True, blank=True)\n    musiconhold = models.CharField(max_length=128, choices=MUSICONHOLD, null=True, blank=True)\n    announce = models.CharField(max_length=128, null=True, blank=True)\n    context = models.ForeignKey(\n        Contexts, on_delete=models.CASCADE, max_length=200, db_column='context')\n    timeout = models.IntegerField(null=True, blank=True)\n    ringinuse = models.CharField(\n        max_length=128, choices=YES_NO, null=True, blank=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "QueueMember",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class QueueMember(models.Model):\n    id = models.IntegerField(unique=True, primary_key=True, serialize=False, verbose_name='Unique ID', editable=True)\n    queue_name = models.CharField(max_length=80, null=True, blank=True)\n    interface = models.CharField(max_length=80, null=True, blank=True)\n    membername = models.CharField(max_length=80, null=True, blank=True)\n    state_interface = models.CharField(max_length=80, null=True, blank=True)\n    penalty = models.IntegerField(null=True, blank=True)\n    paused = models.IntegerField(null=True, blank=True)\n    uniqueid = models.IntegerField(null=True, blank=True)\n    wrapuptime = models.IntegerField(null=True, blank=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "QueuesConfig",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class QueuesConfig(models.Model):\n    id = models.IntegerField(unique=True, primary_key=True, serialize=False, verbose_name='Unique ID', editable=True)\n    extension = models.CharField(max_length=20, blank=True, null=True)\n    descr = models.CharField(max_length=35, blank=True, null=True)\n    grppre = models.CharField(max_length=100, blank=True, null=True)\n    alertinfo = models.CharField(max_length=254, blank=True, null=True)\n    ringing = models.IntegerField(blank=True, null=True)\n    maxwait = models.CharField(max_length=8, blank=True, null=True)\n    password = models.CharField(max_length=20, blank=True, null=True)\n    ivr_id = models.CharField(max_length=8, blank=True, null=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "QueueRules",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class QueueRules(models.Model):\n    id = models.IntegerField(unique=True, primary_key=True, serialize=False, verbose_name='Unique ID', editable=True)\n    rule_name = models.CharField(max_length=80, blank=True, null=True)\n    time = models.CharField(max_length=32, blank=True, null=True)\n    min_penalty = models.CharField(max_length=32, blank=True, null=True)\n    max_penalty = models.CharField(max_length=32, blank=True, null=True)\n    def __str__(self):\n        return self.rule_name\n    class Meta:\n        verbose_name = u'Queues_rules'",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "QueueLog",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class QueueLog(models.Model):\n    time = models.CharField(max_length=20, blank=False, null=True, editable=False, db_index=True)\n    callid = models.CharField(max_length=32, blank=True, null=False, editable=False, db_index=True)\n    queue = models.CharField(max_length=32, blank=True, null=False, editable=False, db_index=True, db_column='queuename')\n    agent = models.CharField(max_length=32, blank=True, null=False, editable=False, db_index=True)\n    event = models.CharField(max_length=32, blank=True, null=False, editable=False, db_index=True)\n    data = models.TextField(blank=True, null=False, editable=False)\n    class Meta:\n        db_table = 'queues_log'\n    def __unicode__(self):",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Sip_conf",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Sip_conf(models.Model):\n    \"\"\"\n        Sip \n    \"\"\"\n    id = models.BigIntegerField(unique=True, primary_key=True, serialize=False, verbose_name='Unique ID', editable=True)\n    name = models.CharField(max_length=15, help_text='Numéro')\n    host = models.CharField(max_length=25, default='dynamic',\n                            help_text='Liaison à un hôte ou une adresse IP spécifique, ou \\'dynamique \\'')\n    nat = models.CharField(max_length=5, default='no',\n                           help_text='Autoriser ou non le travail via NAT', choices=NAT)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Sippeers",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class Sippeers(models.Model):\n    \"\"\"\n        Sippeers\n    \"\"\"\n    id = models.BigIntegerField(unique=True, primary_key=True, serialize=False, verbose_name='Unique ID', editable=True)\n    name = models.CharField(max_length=15, help_text='Numéro')\n    ipaddr = models.GenericIPAddressField(\n        blank=True, null=True, help_text='Addresse IP')\n    port = models.PositiveIntegerField(\n        blank=True, null=True, help_text='Port de clients non dynamiques')",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "VoiceMail",
        "kind": 6,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "class VoiceMail(models.Model):\n    id = models.BigIntegerField(unique=True, primary_key=True,\n                             serialize=False, verbose_name='Unique ID', editable=True)\n    uniqueid = models.IntegerField(null=True, blank=True)\n    context = models.ForeignKey(Contexts, on_delete=models.CASCADE, blank=True, null=True, help_text='le contexte', db_column='context')\n    mailbox = models.CharField(max_length=80, null=True, blank=True)\n    password = models.CharField(max_length=80, null=True, blank=True)\n    fullname = models.CharField(max_length=80, null=True, blank=True)\n    alias = models.CharField(max_length=80, null=True, blank=True)\n    email = models.CharField(max_length=80, null=True, blank=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "ranged",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "ranged = [(i,i) for i in range(11)]\nrangedAMAFLAGS = [(i,i) for i in range(6)]\nMAX_CONTACTS = (\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5),\n    (6, 6),\n    (7, 7),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "rangedAMAFLAGS",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "rangedAMAFLAGS = [(i,i) for i in range(6)]\nMAX_CONTACTS = (\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5),\n    (6, 6),\n    (7, 7),\n    (8, 8),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "MAX_CONTACTS",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "MAX_CONTACTS = (\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5),\n    (6, 6),\n    (7, 7),\n    (8, 8),\n    (9, 9),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "AMAFLAGS",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "AMAFLAGS = (\n    (1, 1),\n    (2, 2),\n    (3, 3),\n    (4, 4),\n    (5, 5),\n    (6, 6),\n    (7, 7),\n    (8, 8),\n    (9, 9),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "Q_FREQUENCE",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "Q_FREQUENCE = (\n    (30, 30),\n    (40, 40),\n    (50, 50),\n    (60, 60),\n)\nYES_NO = (\n    ('yes', 'yes'),\n    ('no', 'no'),\n)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "YES_NO",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "YES_NO = (\n    ('yes', 'yes'),\n    ('no', 'no'),\n)\nTRANSPORT = (\n    ('transport-udp', 'transport-udp'),\n    ('transport-tcp', 'transport-tcp'),\n)\nTRANSPORT_SIP = (\n    ('udp','udp'),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "TRANSPORT",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "TRANSPORT = (\n    ('transport-udp', 'transport-udp'),\n    ('transport-tcp', 'transport-tcp'),\n)\nTRANSPORT_SIP = (\n    ('udp','udp'),\n    ('tcp','tcp'),\n    ('udp,tcp','udp,tcp'),\n    ('tcp,udp','tcp,udp'),\n)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "TRANSPORT_SIP",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "TRANSPORT_SIP = (\n    ('udp','udp'),\n    ('tcp','tcp'),\n    ('udp,tcp','udp,tcp'),\n    ('tcp,udp','tcp,udp'),\n)\nALLOW = (\n    ('all', 'all'),\n    ('alaw', 'alaw'),\n    ('disallow', 'disallow'),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "ALLOW",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "ALLOW = (\n    ('all', 'all'),\n    ('alaw', 'alaw'),\n    ('disallow', 'disallow'),\n)\nIN_OUT = (\n    (True, 'Entrant'),\n    (False, 'Sortant'),\n)\nQUEUE_AUTOPAUSE = (",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "IN_OUT",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "IN_OUT = (\n    (True, 'Entrant'),\n    (False, 'Sortant'),\n)\nQUEUE_AUTOPAUSE = (\n    ('queue', 'queue'),\n    ('autopause', 'autopause'),\n)\nQUEUE_STRATEGY = (\n    ('queue', 'queue'),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "QUEUE_AUTOPAUSE",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "QUEUE_AUTOPAUSE = (\n    ('queue', 'queue'),\n    ('autopause', 'autopause'),\n)\nQUEUE_STRATEGY = (\n    ('queue', 'queue'),\n    ('strategy', 'strategy'),\n)\nDISPOSITIONS=(\n    ('ANSWERED','ANSWERED'),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "QUEUE_STRATEGY",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "QUEUE_STRATEGY = (\n    ('queue', 'queue'),\n    ('strategy', 'strategy'),\n)\nDISPOSITIONS=(\n    ('ANSWERED','ANSWERED'),\n    ('FAILED', 'FAILED'),\n    ('NO ANSWER','NO ANSWER'),\n    ('BUSY','BUSY'),\n    ('DOCUMENTATION','DOCUMENTATION'),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "TYPE_SIP",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "TYPE_SIP = (\n    ('friend', 'friend'),\n    ('peer', 'peer'),\n    ('user', 'user'),\n)\nINSECURE_SIP = (\n    ('port', 'port'),\n    ('very', 'very'),\n    ('no', 'no'),\n)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "INSECURE_SIP",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "INSECURE_SIP = (\n    ('port', 'port'),\n    ('very', 'very'),\n    ('no', 'no'),\n)\nDTMFMODE_SIP = (\n    ('rfc2833', 'rfc2833'),\n    ('info', 'info'),\n    ('shortinfo', 'shortinfo'),\n    ('inband', 'inband'),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "DTMFMODE_SIP",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "DTMFMODE_SIP = (\n    ('rfc2833', 'rfc2833'),\n    ('info', 'info'),\n    ('shortinfo', 'shortinfo'),\n    ('inband', 'inband'),\n    ('auto', 'auto'),\n)\nTRUEFALSE = (\n    (False, False),\n    (True, True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "TRUEFALSE",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "TRUEFALSE = (\n    (False, False),\n    (True, True)\n)\nDIRECTMEDIA = (\n    ('yes', 'yes'),\n    ('no', 'no'),\n    ('nonat', 'nonat'),\n    ('update', 'update'),\n)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "DIRECTMEDIA",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "DIRECTMEDIA = (\n    ('yes', 'yes'),\n    ('no', 'no'),\n    ('nonat', 'nonat'),\n    ('update', 'update'),\n)\nINVITE = (\n    ('port', \"Ignorez le numéro de port d'où provient l'authentification\"),\n    ('invite', \"Ne nécessite pas d'INVITATION initiale pour l'authentification\"),\n    ('port,invite', \"N'exigez pas l'INVITE initiale pour l'authentification et ignorez le port d'où provient la demande\"),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "INVITE",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "INVITE = (\n    ('port', \"Ignorez le numéro de port d'où provient l'authentification\"),\n    ('invite', \"Ne nécessite pas d'INVITATION initiale pour l'authentification\"),\n    ('port,invite', \"N'exigez pas l'INVITE initiale pour l'authentification et ignorez le port d'où provient la demande\"),\n)\nNAT = (\n    ('yes', 'yes'),\n    ('no', 'no'),\n    ('never', 'never'),\n    ('route', 'route'),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "NAT",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "NAT = (\n    ('yes', 'yes'),\n    ('no', 'no'),\n    ('never', 'never'),\n    ('route', 'route'),\n)\nCALLINGPRES = (\n    ('allowed_not_screened', 'allowed_not_screened'),\n    ('allowed_passed_screen', 'allowed_passed_screen'),\n    ('allowed_failed_screen', 'allowed_failed_screen'),",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "CALLINGPRES",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "CALLINGPRES = (\n    ('allowed_not_screened', 'allowed_not_screened'),\n    ('allowed_passed_screen', 'allowed_passed_screen'),\n    ('allowed_failed_screen', 'allowed_failed_screen'),\n    ('allowed', 'allowed'),\n    ('prohib_not_screened', 'prohib_not_screened'),\n    ('prohib_passed_screen', 'prohib_passed_screen'),\n    ('prohib_failed_screen', 'prohib_failed_screen'),\n    ('prohib', 'prohib'),\n)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "PROGRESSINBAND",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "PROGRESSINBAND = (\n    ('yes', 'yes'),\n    ('no', 'no'),\n    ('never', 'never'),\n)\nSESSIONTIMERS = (\n    ('accept', 'accept'),\n    ('refuse', 'refuse'),\n    ('originate', 'originate'),\n)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "SESSIONTIMERS",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "SESSIONTIMERS = (\n    ('accept', 'accept'),\n    ('refuse', 'refuse'),\n    ('originate', 'originate'),\n)\nSESSIONREFRESHER = (\n    ('uac', 'uac'),\n    ('uas', 'uas'),\n)\nclass Contexts(models.Model):",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "SESSIONREFRESHER",
        "kind": 5,
        "importPath": "pbx.models",
        "description": "pbx.models",
        "peekOfCode": "SESSIONREFRESHER = (\n    ('uac', 'uac'),\n    ('uas', 'uas'),\n)\nclass Contexts(models.Model):\n    \"\"\"\n        Context for extensions\n    \"\"\"\n    name = models.CharField(max_length=25, primary_key=True,  blank=False, null=False, verbose_name='le contexte', editable=True)\n    full_name = models.CharField(max_length=25, blank=False, null=False, verbose_name='la description', editable=True)",
        "detail": "pbx.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "pbx.urls",
        "description": "pbx.urls",
        "peekOfCode": "app_name = 'pbx'\nurlpatterns = [\n    path('pbx/cdr/', cdr_view, name='cdr_view'),\n    path('pbx/cdr/<int:uniqueid>/', cdr_detail, name='cdr_detail'),\n    path('pbx/cel/', cel_view, name='cel_view'),\n    path('pbx/cel/<int:uniqueid>/', cel_detail, name='cel_detail'),\n]",
        "detail": "pbx.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "pbx.urls",
        "description": "pbx.urls",
        "peekOfCode": "urlpatterns = [\n    path('pbx/cdr/', cdr_view, name='cdr_view'),\n    path('pbx/cdr/<int:uniqueid>/', cdr_detail, name='cdr_detail'),\n    path('pbx/cel/', cel_view, name='cel_view'),\n    path('pbx/cel/<int:uniqueid>/', cel_detail, name='cel_detail'),\n]",
        "detail": "pbx.urls",
        "documentation": {}
    },
    {
        "label": "cdr_view",
        "kind": 2,
        "importPath": "pbx.views",
        "description": "pbx.views",
        "peekOfCode": "def cdr_view(request):\n     \"\"\"\n          CDR LIst\n     \"\"\"\n     user = request.user.username\n     cdr = Cdr.objects.filter(src=user).order_by('-calldate')[:10]\n     # cdr_list = Cdr.objects.all()\n     paginator = Paginator(cdr, 10)\n     page = request.GET.get('page')\n     try:",
        "detail": "pbx.views",
        "documentation": {}
    },
    {
        "label": "cdr_detail",
        "kind": 2,
        "importPath": "pbx.views",
        "description": "pbx.views",
        "peekOfCode": "def cdr_detail(request, uniqueid):\n     cdr = Cdr.objects.get(uniqueid=uniqueid)\n     context = {\n          'cdr': cdr\n     }\n     template_name = 'pages/pbx/cdr/cdr_detail.html'\n     return render(request, template_name, context)\n@login_required\ndef cel_view(request):\n     \"\"\"",
        "detail": "pbx.views",
        "documentation": {}
    },
    {
        "label": "cel_view",
        "kind": 2,
        "importPath": "pbx.views",
        "description": "pbx.views",
        "peekOfCode": "def cel_view(request):\n     \"\"\"\n          CEL LIst\n     \"\"\"\n     user = request.user\n     cel = Cel.objects.filter(cid_num=user).order_by('-eventtime')[:10]\n     paginator = Paginator(cel, 10)\n     page = request.GET.get('page')\n     try:\n          cel_list = paginator.page(page)",
        "detail": "pbx.views",
        "documentation": {}
    },
    {
        "label": "cel_detail",
        "kind": 2,
        "importPath": "pbx.views",
        "description": "pbx.views",
        "peekOfCode": "def cel_detail(request, uniqueid):\n     \"\"\"\n          CEL detail\n     \"\"\"\n     cel = Cel.objects.get(uniqueid=uniqueid)\n     context = {\n          'cel': cel\n     }\n     template_name = 'pages/pbx/cel/cel_detail.html'\n     return render(request, template_name, context)",
        "detail": "pbx.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "recouvrement.migrations.0001_initial",
        "description": "recouvrement.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Recouvrement',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "recouvrement.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "recouvrement.migrations.0002_auto_20210504_0711",
        "description": "recouvrement.migrations.0002_auto_20210504_0711",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('recouvrement', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='recouvrement',\n            name='Remarque',\n            field=models.CharField(blank=True, default='-', max_length=200, null=True),\n        ),",
        "detail": "recouvrement.migrations.0002_auto_20210504_0711",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "recouvrement.migrations.0003_auto_20210506_1022",
        "description": "recouvrement.migrations.0003_auto_20210506_1022",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('recouvrement', '0002_auto_20210504_0711'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='recouvrement',\n            name='Rue',\n            field=models.CharField(blank=True, default='-', max_length=100, null=True),\n        ),",
        "detail": "recouvrement.migrations.0003_auto_20210506_1022",
        "documentation": {}
    },
    {
        "label": "RecouvrementAdmin",
        "kind": 6,
        "importPath": "recouvrement.admin",
        "description": "recouvrement.admin",
        "peekOfCode": "class RecouvrementAdmin(admin.ModelAdmin):\n    list_display = (\n        'user', 'created_date', 'questions1', 'questions2', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Quartier', 'Commune', 'Province', \n        'Tel1', 'Email', 'Statut', 'Bound', 'Remarque'\n    )\n    list_filter = (\n        ('created_date', PastDateRangeFilter), \n        'user', 'Statut', 'Bound'\n    )\n    actions = [export_to_csv]",
        "detail": "recouvrement.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "recouvrement.admin",
        "description": "recouvrement.admin",
        "peekOfCode": "def export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(\n                                          opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields(\n    ) if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information",
        "detail": "recouvrement.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv.short_description",
        "kind": 5,
        "importPath": "recouvrement.admin",
        "description": "recouvrement.admin",
        "peekOfCode": "export_to_csv.short_description = 'Export to CSV'\nclass RecouvrementAdmin(admin.ModelAdmin):\n    list_display = (\n        'user', 'created_date', 'questions1', 'questions2', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Quartier', 'Commune', 'Province', \n        'Tel1', 'Email', 'Statut', 'Bound', 'Remarque'\n    )\n    list_filter = (\n        ('created_date', PastDateRangeFilter), \n        'user', 'Statut', 'Bound'\n    )",
        "detail": "recouvrement.admin",
        "documentation": {}
    },
    {
        "label": "RecouvrementConfig",
        "kind": 6,
        "importPath": "recouvrement.apps",
        "description": "recouvrement.apps",
        "peekOfCode": "class RecouvrementConfig(AppConfig):\n    name = 'recouvrement'",
        "detail": "recouvrement.apps",
        "documentation": {}
    },
    {
        "label": "RecouvrementForm",
        "kind": 6,
        "importPath": "recouvrement.forms",
        "description": "recouvrement.forms",
        "peekOfCode": "class RecouvrementForm(forms.ModelForm):\n    class Meta:\n        model = Recouvrement\n        fields = (\n            'questions1', 'questions2', 'Nom','Post_Nom','Prenom','Numero', 'Rue', 'Quartier', 'Commune', 'Ville', 'Province',\n            'Tel1','Email', 'Statut', 'Bound', 'Remarque',\n        )\n    questions1 = forms.CharField(\n        label='',\n        required=False,",
        "detail": "recouvrement.forms",
        "documentation": {}
    },
    {
        "label": "Recouvrement",
        "kind": 6,
        "importPath": "recouvrement.models",
        "description": "recouvrement.models",
        "peekOfCode": "class Recouvrement(models.Model):\n    user             = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date     = models.DateTimeField(auto_now_add=True)\n    questions1       = models.CharField(max_length=200, null=True, default='-')\n    questions2       = models.CharField(max_length=200, null=True, default='-')\n    Nom              = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Post_Nom         = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Prenom           = models.CharField(max_length=100, null=True, blank=True, default='-')\n    Numero           = models.CharField(max_length=20, null=True, blank=True, default='-', verbose_name='N°')\n    Rue              = models.CharField(max_length=100, null=True, blank=True, default='-')",
        "detail": "recouvrement.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "recouvrement.urls",
        "description": "recouvrement.urls",
        "peekOfCode": "urlpatterns = [\n    path('recouvrement_add/', recouvrement_add, name='recouvrement_add'),\n    path('recouvrement_list/', recouvrement_list, name='recouvrement_list'),\n    path('recouvrement_view/<int:id>/', recouvrement_view, name='recouvrement_view'),\n    path('recouvrement_update/<int:id>/', recouvrement_update, name='recouvrement_update'),\n    path('recouvrement_destroy/<int:id>/', recouvrement_destroy, name='recouvrement_destroy')\n]",
        "detail": "recouvrement.urls",
        "documentation": {}
    },
    {
        "label": "recouvrement_add",
        "kind": 2,
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "peekOfCode": "def recouvrement_add(request):\n    \"\"\"\n        Fonction Add new object\n    \"\"\"\n    if request.method == 'POST':\n        # create a form instance and populate it with data from the request:\n        form = RecouvrementForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required",
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "recouvrement_list",
        "kind": 2,
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "peekOfCode": "def recouvrement_list(request): \n    \"\"\"\n        Fonction List objects\n    \"\"\" \n    user = request.user\n    commprom_count = Recouvrement.objects.filter(user=user).order_by('-created_date').count\n    recouvrement = Recouvrement.objects.filter(user=user).order_by('-created_date')\n    paginator = Paginator(recouvrement, 10)\n    page = request.GET.get('page')\n    try:",
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "recouvrement_view",
        "kind": 2,
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "peekOfCode": "def recouvrement_view(request, id):  \n    \"\"\"\n        Fonction Detail\n    \"\"\"\n    user = request.user\n    recouvrement = Recouvrement.objects.filter(user=user).get(id=id)\n    context = {\n        'recouvrement': recouvrement,\n    }  \n    template_name = 'pages/recouvrement/recouvrement_view.html'",
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "recouvrement_update",
        "kind": 2,
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "peekOfCode": "def recouvrement_update(request, id):\n    \"\"\"\n        Fonction de Mis à jour\n    \"\"\"\n    recouvrement = Recouvrement.objects.get(id=id)  \n    form = RecouvrementForm(request.POST, instance=dat)  \n    if form.is_valid():  \n        form.user = request.user\n        form.save()  \n        messages.success(request, \"Recouvrement modifié!\")",
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "recouvrement_destroy",
        "kind": 2,
        "importPath": "recouvrement.views",
        "description": "recouvrement.views",
        "peekOfCode": "def recouvrement_destroy(request, id):\n    \"\"\"\n        Fonction de Suppresion\n    \"\"\"\n    user = request.user\n    recouvrement = Recouvrement.objects.filter(user=user).get(id=id)  \n    recouvrement.delete()  \n    return redirect(\"recouvrement:recouvrement_list\")",
        "detail": "recouvrement.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "renouvellement.migrations.0001_initial",
        "description": "renouvellement.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Renouvellement',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "renouvellement.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "renouvellement.migrations.0002_auto_20210505_0021",
        "description": "renouvellement.migrations.0002_auto_20210505_0021",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('renouvellement', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='renouvellement',\n            old_name='Facebook',\n            new_name='Rue',\n        ),",
        "detail": "renouvellement.migrations.0002_auto_20210505_0021",
        "documentation": {}
    },
    {
        "label": "RenouvellementAdmin",
        "kind": 6,
        "importPath": "renouvellement.admin",
        "description": "renouvellement.admin",
        "peekOfCode": "class RenouvellementAdmin(admin.ModelAdmin):\n    list_display = (\n        'id', 'questions1', 'questions2', 'questions3', 'questions4', 'questions5', 'questions6', 'questions7', 'questions8', 'questions9',\n        'questions10', 'questions12', 'questions13', 'questions15', 'questions16', 'Q19temps_a_contacter',\n        'montant_de_pret', 'duree_de_credit', 'montant_a_rembourser_chaque_mois', 'montant_des_ventes_bonne_journee',\n        'montant_des_ventes_mauvaise_journee', 'date_a_laquelle_recevoir_credit', 'Nom_du_garant', 'Activite',\n        'Remarque', 'Commentaire', 'Concurrent', 'CommentaireQ17',\n        'Nom_societe', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Quartier', 'Rue', 'Commune', 'Ville', 'Province',\n        'Tel1', 'Email', 'Statut',\n    )",
        "detail": "renouvellement.admin",
        "documentation": {}
    },
    {
        "label": "export_to_csv",
        "kind": 2,
        "importPath": "renouvellement.admin",
        "description": "renouvellement.admin",
        "peekOfCode": "def export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment;' \\\n                                      'filename={}.csv'.format(opts.verbose_name)\n    writer = csv.writer(response)\n    fields = [field for field in opts.get_fields() if not field.many_to_many and not field.one_to_many]\n    # Write a first row with header information\n    writer.writerow([field.verbose_name for field in fields])\n    # Write data rows",
        "detail": "renouvellement.admin",
        "documentation": {}
    },
    {
        "label": "RenouvellementConfig",
        "kind": 6,
        "importPath": "renouvellement.apps",
        "description": "renouvellement.apps",
        "peekOfCode": "class RenouvellementConfig(AppConfig):\n    name = 'renouvellement'",
        "detail": "renouvellement.apps",
        "documentation": {}
    },
    {
        "label": "RenouvellementForm",
        "kind": 6,
        "importPath": "renouvellement.forms",
        "description": "renouvellement.forms",
        "peekOfCode": "class RenouvellementForm(forms.ModelForm):\n    class Meta:\n        model = Renouvellement\n        fields = (\n            'questions1', 'questions2', 'questions3', 'questions4', 'questions5', 'questions6', 'questions7', 'questions8', 'questions9',\n            'questions10', 'questions12', 'questions13', 'questions15', 'questions16', 'Q19temps_a_contacter',\n            'montant_de_pret', 'duree_de_credit', 'montant_a_rembourser_chaque_mois', 'montant_des_ventes_bonne_journee', \n            'montant_des_ventes_mauvaise_journee', 'date_a_laquelle_recevoir_credit', 'Nom_du_garant', 'Activite', \n            'Remarque', 'Commentaire', 'Concurrent', 'CommentaireQ17',\n            'Nom_societe', 'Nom', 'Post_Nom', 'Prenom', 'Numero', 'Quartier', 'Rue', 'Commune', 'Ville', 'Province',",
        "detail": "renouvellement.forms",
        "documentation": {}
    },
    {
        "label": "Renouvellement",
        "kind": 6,
        "importPath": "renouvellement.models",
        "description": "renouvellement.models",
        "peekOfCode": "class Renouvellement(models.Model):\n    user             = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_date     = models.DateTimeField(auto_now_add=True)\n    questions1       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions2       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions3       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions4       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions5       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions6       = models.CharField(max_length=200, null=True, blank=True, default='-')\n    questions7       = models.CharField(max_length=200, null=True, blank=True, default='-')",
        "detail": "renouvellement.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "renouvellement.urls",
        "description": "renouvellement.urls",
        "peekOfCode": "app_name = 'renouvellement'\nurlpatterns = [\n    path('renouvellement_add/', renouvellement_add, name='renouvellement_add'),\n    path('renouvellement_list/', renouvellement_list, name='renouvellement_list'),\n    path('renouvellement_update/<int:id>/', renouvellement_update, name='renouvellement_update'),\n    path('renouvellement_view/<int:id>/', renouvellement_view, name='renouvellement_view'),\n    path('renouvellement_destroy/<int:id>/', renouvellement_destroy, name='renouvellement_destroy')\n]",
        "detail": "renouvellement.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "renouvellement.urls",
        "description": "renouvellement.urls",
        "peekOfCode": "urlpatterns = [\n    path('renouvellement_add/', renouvellement_add, name='renouvellement_add'),\n    path('renouvellement_list/', renouvellement_list, name='renouvellement_list'),\n    path('renouvellement_update/<int:id>/', renouvellement_update, name='renouvellement_update'),\n    path('renouvellement_view/<int:id>/', renouvellement_view, name='renouvellement_view'),\n    path('renouvellement_destroy/<int:id>/', renouvellement_destroy, name='renouvellement_destroy')\n]",
        "detail": "renouvellement.urls",
        "documentation": {}
    },
    {
        "label": "renouvellement_add",
        "kind": 2,
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "peekOfCode": "def renouvellement_add(request):\n    \"\"\"\n        Fonction Add new object\n    \"\"\"\n    if request.method == 'POST':\n        # create a form instance and populate it with data from the request:\n        form = RenouvellementForm(request.POST)\n        # check whether it's valid:\n        if form.is_valid():\n            # process the data in form.cleaned_data as required",
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "renouvellement_list",
        "kind": 2,
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "peekOfCode": "def renouvellement_list(request): \n    \"\"\"\n        Fonction List objects\n    \"\"\" \n    user = request.user\n    renouvellement_count = Renouvellement.objects.filter(user=user).order_by('-created_date').count()\n    renouvellement = Renouvellement.objects.filter(user=user).order_by('-created_date')\n    paginator = Paginator(renouvellement, 10)\n    page = request.GET.get('page')\n    try:",
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "renouvellement_view",
        "kind": 2,
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "peekOfCode": "def renouvellement_view(request, id):  \n    \"\"\"\n        Fonction Detail\n    \"\"\"\n    user = request.user\n    renouvellement = Renouvellement.objects.filter(user=user).get(id=id)\n    context = {\n        'renouvellement': renouvellement,\n    }  \n    template_name = 'pages/renouvellement/renouvellement_view.html'",
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "renouvellement_update",
        "kind": 2,
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "peekOfCode": "def renouvellement_update(request, id):\n    \"\"\"\n        Fonction de Mis à jour\n    \"\"\"\n    renouvellement = Renouvellement.objects.get(id=id)\n    form = RenouvellementForm(request.POST, instance=dat)  \n    if form.is_valid():  \n        form.user = request.user\n        form.save()  \n        messages.success(request, \"Renouvellement modifié!\")",
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "renouvellement_destroy",
        "kind": 2,
        "importPath": "renouvellement.views",
        "description": "renouvellement.views",
        "peekOfCode": "def renouvellement_destroy(request, id):\n    \"\"\"\n        Fonction de Suppresion\n    \"\"\"\n    user = request.user\n    renouvellement = Renouvellement.objects.filter(user=user).get(id=id)  \n    renouvellement.delete()  \n    return redirect(\"renouvellement:renouvellement_list\")",
        "detail": "renouvellement.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "scripting.asgi",
        "description": "scripting.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "scripting.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-)s$pxdv1v^u$pp1#46^_4&!46$xj&0-$a41t)8!s(^s-$so&j5'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['192.168.11.102', '*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-)s$pxdv1v^u$pp1#46^_4&!46$xj&0-$a41t)8!s(^s-$so&j5'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['192.168.11.102', '*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['192.168.11.102', '*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['192.168.11.102', '*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Extern Apps",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Extern Apps\n    'daterangefilter',\n    'bootstrap_datepicker_plus',",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'scripting.urls'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "ROOT_URLCONF = 'scripting.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "WSGI_APPLICATION = 'scripting.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES_SQLITE = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'crm.sqlite3',\n    }\n}\nDATABASES_PGSQL = {",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES_SQLITE",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "DATABASES_SQLITE = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'crm.sqlite3',\n    }\n}\nDATABASES_PGSQL = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'asterisk',",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES_PGSQL",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "DATABASES_PGSQL = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'asterisk',\n        'USER': 'asterisk',\n        'HOST': '192.168.11.104',\n        'PASSWORD': 'asterisk',\n        'PORT': '5432'\n    }\n}",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES_MARIADB",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "DATABASES_MARIADB = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'asterisk',\n        'USER': 'asterisk',\n        'PASSWORD': 'asterisk',\n        'HOST': '192.168.11.103',\n        'PORT': '3306',\n    }\n}",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "DATABASES = DATABASES_SQLITE\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "LANGUAGE_CODE = 'fr-fr'\nTIME_ZONE = 'Africa/Kinshasa'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nDATE_FORMAT = 'Y-m-d'\nDATETIME_FORMAT = 'Y-m-d H:i:s'\nTIME_FORMAT = 'H:i:s'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "TIME_ZONE = 'Africa/Kinshasa'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nDATE_FORMAT = 'Y-m-d'\nDATETIME_FORMAT = 'Y-m-d H:i:s'\nTIME_FORMAT = 'H:i:s'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nDATE_FORMAT = 'Y-m-d'\nDATETIME_FORMAT = 'Y-m-d H:i:s'\nTIME_FORMAT = 'H:i:s'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\nDATE_FORMAT = 'Y-m-d'\nDATETIME_FORMAT = 'Y-m-d H:i:s'\nTIME_FORMAT = 'H:i:s'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_root\")",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "USE_TZ = True\nDATE_FORMAT = 'Y-m-d'\nDATETIME_FORMAT = 'Y-m-d H:i:s'\nTIME_FORMAT = 'H:i:s'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_root\")\nMEDIA_URL = '/media/'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "DATE_FORMAT",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "DATE_FORMAT = 'Y-m-d'\nDATETIME_FORMAT = 'Y-m-d H:i:s'\nTIME_FORMAT = 'H:i:s'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_root\")\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "DATETIME_FORMAT",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "DATETIME_FORMAT = 'Y-m-d H:i:s'\nTIME_FORMAT = 'H:i:s'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_root\")\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Use BOOTSTRAP3 if you are using Bootstrap 3",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "TIME_FORMAT",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "TIME_FORMAT = 'H:i:s'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_root\")\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Use BOOTSTRAP3 if you are using Bootstrap 3\nBOOTSTRAP4 = {",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_root\")\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Use BOOTSTRAP3 if you are using Bootstrap 3\nBOOTSTRAP4 = {\n    'include_jquery': True,\n}\n# Default primary key field type",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, \"static\")]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_root\")\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Use BOOTSTRAP3 if you are using Bootstrap 3\nBOOTSTRAP4 = {\n    'include_jquery': True,\n}\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"static_root\")\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Use BOOTSTRAP3 if you are using Bootstrap 3\nBOOTSTRAP4 = {\n    'include_jquery': True,\n}\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Use BOOTSTRAP3 if you are using Bootstrap 3\nBOOTSTRAP4 = {\n    'include_jquery': True,\n}\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = '/'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Use BOOTSTRAP3 if you are using Bootstrap 3\nBOOTSTRAP4 = {\n    'include_jquery': True,\n}\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = '/'\nLOGIN_REDIRECT_URL = '/'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "BOOTSTRAP4",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "BOOTSTRAP4 = {\n    'include_jquery': True,\n}\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = '/'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_URL = '/'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "LOGIN_URL = '/'\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "scripting.settings",
        "description": "scripting.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = '/'",
        "detail": "scripting.settings",
        "documentation": {}
    },
    {
        "label": "handler400",
        "kind": 5,
        "importPath": "scripting.urls",
        "description": "scripting.urls",
        "peekOfCode": "handler400 = 'scripting.views_errors_page.handler400'\nhandler403 = 'scripting.views_errors_page.handler403'\nhandler404 = 'scripting.views_errors_page.handler404'\nhandler500 = 'scripting.views_errors_page.handler500'\nhandler503 = 'scripting.views_errors_page.handler503'\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('accounts.urls')),\n    path('app/', include('app.urls')),\n    path('dashboard/', include('dashboard.urls')),",
        "detail": "scripting.urls",
        "documentation": {}
    },
    {
        "label": "handler403",
        "kind": 5,
        "importPath": "scripting.urls",
        "description": "scripting.urls",
        "peekOfCode": "handler403 = 'scripting.views_errors_page.handler403'\nhandler404 = 'scripting.views_errors_page.handler404'\nhandler500 = 'scripting.views_errors_page.handler500'\nhandler503 = 'scripting.views_errors_page.handler503'\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('accounts.urls')),\n    path('app/', include('app.urls')),\n    path('dashboard/', include('dashboard.urls')),\n    path('forms/', include('forms.urls')),",
        "detail": "scripting.urls",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "scripting.urls",
        "description": "scripting.urls",
        "peekOfCode": "handler404 = 'scripting.views_errors_page.handler404'\nhandler500 = 'scripting.views_errors_page.handler500'\nhandler503 = 'scripting.views_errors_page.handler503'\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('accounts.urls')),\n    path('app/', include('app.urls')),\n    path('dashboard/', include('dashboard.urls')),\n    path('forms/', include('forms.urls')),\n    path('pbx/', include('pbx.urls')),",
        "detail": "scripting.urls",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 5,
        "importPath": "scripting.urls",
        "description": "scripting.urls",
        "peekOfCode": "handler500 = 'scripting.views_errors_page.handler500'\nhandler503 = 'scripting.views_errors_page.handler503'\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('accounts.urls')),\n    path('app/', include('app.urls')),\n    path('dashboard/', include('dashboard.urls')),\n    path('forms/', include('forms.urls')),\n    path('pbx/', include('pbx.urls')),\n    path('agenda/', include('agenda.urls')),",
        "detail": "scripting.urls",
        "documentation": {}
    },
    {
        "label": "handler503",
        "kind": 5,
        "importPath": "scripting.urls",
        "description": "scripting.urls",
        "peekOfCode": "handler503 = 'scripting.views_errors_page.handler503'\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('accounts.urls')),\n    path('app/', include('app.urls')),\n    path('dashboard/', include('dashboard.urls')),\n    path('forms/', include('forms.urls')),\n    path('pbx/', include('pbx.urls')),\n    path('agenda/', include('agenda.urls')),\n    path('dat/', include('dat.urls')),",
        "detail": "scripting.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "scripting.urls",
        "description": "scripting.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('accounts.urls')),\n    path('app/', include('app.urls')),\n    path('dashboard/', include('dashboard.urls')),\n    path('forms/', include('forms.urls')),\n    path('pbx/', include('pbx.urls')),\n    path('agenda/', include('agenda.urls')),\n    path('dat/', include('dat.urls')),\n    path('acquisition/', include('acquisition.urls')),",
        "detail": "scripting.urls",
        "documentation": {}
    },
    {
        "label": "handler400",
        "kind": 2,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "def handler400(request, exception):\n\treturn render(request,  template_name='pages/errors/page-error-400.html')\n\tresponse.status_code = 400\n\treturn response\n# Permission denied\ndef handler403(request, exception):\n\treturn render(request,  template_name='pages/errors/page-error-403.html')\n\tresponse.status_code = 403\n\treturn response\n# Page not found",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "handler403",
        "kind": 2,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "def handler403(request, exception):\n\treturn render(request,  template_name='pages/errors/page-error-403.html')\n\tresponse.status_code = 403\n\treturn response\n# Page not found\ndef handler404(request, exception):\n\treturn render(request,  template_name='pages/errors/page-error-404.html')\n\tresponse.status_code = 404\n\treturn response\n# Server error",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 2,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "def handler404(request, exception):\n\treturn render(request,  template_name='pages/errors/page-error-404.html')\n\tresponse.status_code = 404\n\treturn response\n# Server error\ndef handler500(request):\n\treturn render(request,  template_name='pages/errors/page-error-500.html')\n\tresponse.status_code = 500\n\treturn response\n#  503",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 2,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "def handler500(request):\n\treturn render(request,  template_name='pages/errors/page-error-500.html')\n\tresponse.status_code = 500\n\treturn response\n#  503\ndef handler500(request):\n\treturn render(request,  template_name='pages/errors/page-error-503.html')\n\tresponse.status_code = 503\n\treturn response",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 2,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "def handler500(request):\n\treturn render(request,  template_name='pages/errors/page-error-503.html')\n\tresponse.status_code = 503\n\treturn response",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "\tresponse.status_code",
        "kind": 5,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "\tresponse.status_code = 400\n\treturn response\n# Permission denied\ndef handler403(request, exception):\n\treturn render(request,  template_name='pages/errors/page-error-403.html')\n\tresponse.status_code = 403\n\treturn response\n# Page not found\ndef handler404(request, exception):\n\treturn render(request,  template_name='pages/errors/page-error-404.html')",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "\tresponse.status_code",
        "kind": 5,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "\tresponse.status_code = 403\n\treturn response\n# Page not found\ndef handler404(request, exception):\n\treturn render(request,  template_name='pages/errors/page-error-404.html')\n\tresponse.status_code = 404\n\treturn response\n# Server error\ndef handler500(request):\n\treturn render(request,  template_name='pages/errors/page-error-500.html')",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "\tresponse.status_code",
        "kind": 5,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "\tresponse.status_code = 404\n\treturn response\n# Server error\ndef handler500(request):\n\treturn render(request,  template_name='pages/errors/page-error-500.html')\n\tresponse.status_code = 500\n\treturn response\n#  503\ndef handler500(request):\n\treturn render(request,  template_name='pages/errors/page-error-503.html')",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "\tresponse.status_code",
        "kind": 5,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "\tresponse.status_code = 500\n\treturn response\n#  503\ndef handler500(request):\n\treturn render(request,  template_name='pages/errors/page-error-503.html')\n\tresponse.status_code = 503\n\treturn response",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "\tresponse.status_code",
        "kind": 5,
        "importPath": "scripting.views_errors_page",
        "description": "scripting.views_errors_page",
        "peekOfCode": "\tresponse.status_code = 503\n\treturn response",
        "detail": "scripting.views_errors_page",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "scripting.wsgi",
        "description": "scripting.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "scripting.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'scripting.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]